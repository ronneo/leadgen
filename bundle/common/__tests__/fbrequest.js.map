{"version":3,"sources":["../../../common/__tests__/fbrequest.js"],"names":["fb_graph_api","sample_resp","jest","mock","sample_error_resp","error","first_resp","_params","Promise","resolve","JSON","stringify","second_resp","third_resp","reject","fn","mockImplementationOnce","mockImplementation","params","console","test","uri","qs","fields","fbrequest","get","then","bodyobj","expect","toEqual","catch","err","post","toBeInstanceOf","SyntaxError"],"mappings":"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","file":"fbrequest.js","sourcesContent":["import fbrequest from 'common/fbrequest';\n\nconst fb_graph_api = 'https://graph.facebook.com/v2.12/me';\nconst sample_resp = {\n  'id': '10207432638402470',\n  'name': 'YU LI',\n};\n\njest.mock('request-promise', () => {\n  const sample_resp = {\n    'id': '10207432638402470',\n    'name': 'YU LI',\n  };\n  const sample_error_resp = {\n    error: 'oops',\n  };\n  let first_resp = (_params) => {\n    return Promise.resolve(JSON.stringify(sample_resp));\n  };\n  let second_resp = (_params) => {\n    return Promise.resolve(JSON.stringify(sample_error_resp));\n  };\n  let third_resp = (_params) => {\n    return Promise.reject('what?');\n  };\n\n  return jest.fn()\n    .mockImplementationOnce(first_resp)\n    .mockImplementationOnce(second_resp)\n    .mockImplementationOnce(third_resp)\n    .mockImplementationOnce(first_resp)\n    .mockImplementationOnce(second_resp)\n    .mockImplementationOnce(third_resp)\n    .mockImplementationOnce((_params) => {\n      return Promise.resolve(['this will not pass JSON.parse']);\n    })\n    .mockImplementation((params) => {\n      return new Promise((resolve, reject) => {\n        console.error(params);\n        reject('err');\n      });\n    });\n});\n\ntest('get', () => {\n  let params = {\n    uri: fb_graph_api,\n    qs: {\n      fields: 'id,name',\n    },\n  };\n  return fbrequest.get(params)\n    .then((bodyobj) => {\n      expect(bodyobj).toEqual(sample_resp);\n      return fbrequest.get(params);\n    })\n    .catch((err) => {\n      expect(err).toEqual('oops');\n      return fbrequest.get(params);\n    })\n    .catch((err) => {\n      expect(err).toEqual('what?');\n    });\n});\n\ntest('post', () => {\n  let params = {\n    uri: fb_graph_api,\n    qs: {\n      fields: 'id,name',\n    },\n  };\n  return fbrequest.post(params)\n    .then((bodyobj) => {\n      expect(bodyobj).toEqual(sample_resp);\n      return fbrequest.post(params);\n    })\n    .catch((err) => {\n      expect(err).toEqual('oops');\n      return fbrequest.post(params);\n    })\n    .catch((err) => {\n      expect(err).toEqual('what?');\n      return fbrequest.post(params);\n    })\n    .catch((err) => {\n      expect(err).toBeInstanceOf(SyntaxError);\n    });\n});\n"]}