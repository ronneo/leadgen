{"version":3,"sources":["../../../server/__tests__/secureServer.js"],"names":["jest","mock","REDISCLOUD_URL","GRAPH_BASE_URL","LOCAL_FILE_STORE_PATH","ACCESS_TOKEN_REAP_INTERVAL","ACCESS_TOKEN_TTL","get","fn","mockImplementation","params","Promise","resolve","reject","uri","id","name","email","console","error","useFakeTimers","sample_questions","sample_csv","join","user_response","qid","timeOfMessage","payload","port","Math","floor","random","SAMPLE_USERID","SAMPLE_USER_ACCESSTOKEN","express_server","beforeAll","fs","ensureDirSync","constant","outputJsonSync","test","thedh","theat","DataHandler","then","dh","all","getUserResponse","user_response_mgr","push","botConfig","config","permissions","save","listener","request","resolveWithFullResponse","catch","resp","expect","statusCode","toBe","qs","userid","accesstoken","JSON","parse","body","access_token","headers","advanceTimersByTime","afterAll","done","close","removeSync"],"mappings":"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","file":"secureServer.js","sourcesContent":["import fs from 'fs-extra';\nimport request from 'request-promise';\n\nimport constant from 'common/constant';\nimport DataHandler from 'server/store/DataHandler';\nimport {start as startServer} from 'server/server';\n\njest.mock('common/constant', () => {\n  return {\n    REDISCLOUD_URL: '',\n    GRAPH_BASE_URL: 'https://graph.facebook.com/v2.11',\n    LOCAL_FILE_STORE_PATH: './var/data_test_secure_server',\n    ACCESS_TOKEN_REAP_INTERVAL: 1 * 1000,\n    ACCESS_TOKEN_TTL: 4,\n  };\n});\n\njest.mock('common/fbrequest', () => {\n  return {\n    get: jest.fn().mockImplementation((params) => {\n      return new Promise((resolve, reject) => {\n        if (params.uri == 'https://graph.facebook.com/v2.11/4') {\n          resolve({\n            id: 4,\n            name: 'zack',\n            email: 'zack@fb.com',\n          });\n          return;\n        }\n        console.error('get', params);\n        reject('err');\n      });\n    }),\n  };\n});\n\njest.useFakeTimers();\n\nlet sample_questions = [\n  {\n    'type': 'greeting',\n    'text': 'hello',\n  },\n  {\n    'type': 'question',\n    'text': 'world',\n    'options': [\n      {\n        'text': 'jedi',\n        'resp_payload': 'jedi',\n      }\n    ],\n  },\n  {\n    'type': 'input',\n    'text': 'your name',\n  },\n];\n\nlet sample_csv = [\n  '\\\"uid\\\",\\\"q1\\\",\\\"payload1\\\",\\\"timeofmessage1\\\",\\\"q2\\\",\\\"payload2\\\",\\\"timeofmessage2\\\"',\n  '\\\"4\\\",\\\"1\\\",\\\"hello\\\",\\\"19700101\\\",,,',\n  '\\\"5\\\",,,,\\\"2\\\",\\\"hello\\\",\\\"19700101\\\"',\n  '',\n].join('\\r\\n');\n\nfunction user_response(qid) {\n  return {\n    qid: qid,\n    timeOfMessage: 19700101,\n    payload: 'hello'\n  };\n}\n\nconst port = Math.floor(Math.random() * 10000 + 1024);\nconst SAMPLE_USERID = 4;\nconst SAMPLE_USER_ACCESSTOKEN = 'helloworld';\nlet express_server = null;\n\nbeforeAll(() => {\n  fs.ensureDirSync(constant.LOCAL_FILE_STORE_PATH);\n  fs.outputJsonSync(\n    `${constant.LOCAL_FILE_STORE_PATH}/question_flow_default.json`,\n    sample_questions,\n  );\n});\n\ntest('all', () => {\n  let thedh = null;\n  let theat = null;\n  return DataHandler.get()\n    .then((dh) => {\n      thedh = dh;\n      return Promise.all([\n        dh.getUserResponse(4)\n          .then((user_response_mgr) => {\n            user_response_mgr.push(user_response(1));\n          }),\n        dh.getUserResponse(5)\n          .then((user_response_mgr) => {\n            user_response_mgr.push(user_response(2));\n          }),\n      ]);\n    })\n    .then(() => {\n      thedh.botConfig.config.permissions = {\n        'zack@fb.com': true,\n      };\n      return thedh.botConfig.save();\n    })\n    .then(() => {\n      return startServer(port);\n    })\n    .then((listener) => {\n      express_server = listener;\n      // try get without access_token\n      return request.get({\n        uri: `http://localhost:${port}/download_leads`,\n        resolveWithFullResponse: true,\n      });\n    })\n    .catch((resp) => {\n      // should be denied\n      expect(resp.statusCode).toBe(401);\n      // now let us try getting access_token\n      return request.get({\n        uri: `http://localhost:${port}/auth/fbuser`,\n        qs: {\n          userid: SAMPLE_USERID,\n          accesstoken: SAMPLE_USER_ACCESSTOKEN,\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.statusCode).toBe(200);\n      theat = JSON.parse(resp.body).access_token;\n      // but let us try to fool the system\n      return request.get({\n        uri: `http://localhost:${port}/download_leads`,\n        qs: {\n          access_token: theat + 'hello',\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .catch((resp) => {\n      // must be denied\n      expect(resp.statusCode).toBe(401);\n      // now with access_token try again\n      return request.get({\n        uri: `http://localhost:${port}/download_leads`,\n        qs: {\n          access_token: theat,\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      // should work this time\n      expect(resp.headers['content-type']).toBe('text/csv; charset=utf-8');\n      expect(resp.body).toBe(sample_csv);\n      // and now let us wait for half of TTL time\n      jest.advanceTimersByTime(constant.ACCESS_TOKEN_TTL * 1000 / 2);\n      return request.get({\n        uri: `http://localhost:${port}/download_leads`,\n        qs: {\n          access_token: theat,\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      // we should still be good\n      expect(resp.headers['content-type']).toBe('text/csv; charset=utf-8');\n      expect(resp.body).toBe(sample_csv);\n      // and now let us wait for access_token expired\n      jest.advanceTimersByTime(constant.ACCESS_TOKEN_TTL * 1000 + 10);\n      // and with expired access_token try again\n      return request.get({\n        uri: `http://localhost:${port}/download_leads`,\n        qs: {\n          access_token: theat,\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .catch((resp) => {\n      // must be denied again\n      expect(resp.statusCode).toBe(401);\n    });\n});\n\nafterAll((done) => {\n  express_server.close(() => {\n    fs.removeSync(constant.LOCAL_FILE_STORE_PATH);\n    done();\n  });\n});\n"]}