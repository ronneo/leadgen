{"version":3,"sources":["../../server/server.js"],"names":["start","logger","info","JSON","stringify","constant","port","app","process","cwd","use","bodyParser","json","DataHandler","get","then","dh","datastoreType","datastore","paths","noAuthEndpoints","forEach","initFunc","enableSecureCheckForFollowingRoutes","authEndpoints","disableSecureCheckForFollowingRoutes","env","NODE_ENV","devEndpoints","require","default","Promise","resolve","reject","server","https","createServer","key","fs","readFileSync","cert","http","listener","listen","PORT","err","address","main","module","_listener","FBGraphHelper","setWebsiteURL"],"mappings":";;;;;QAmBgBA,K,GAAAA,K;;AAnBhB;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEAC,iBAAOC,IAAP,uCAAgDC,KAAKC,SAAL,CAAeC,kBAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAAhD;;AAEO,SAASL,KAAT,CAAeM,IAAf,EAAqB;AAC1B,MAAIC,MAAM,6BAAc,wBAAd,EAAyBC,QAAQC,GAAR,EAAzB,EAAwCR,gBAAxC,CAAV;AACAM,MAAIG,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;;AAEA,SAAOC,sBAAYC,GAAZ,GACJC,IADI,CACC,UAACC,EAAD,EAAQ;AACZf,qBAAOC,IAAP,2BAC0Bc,GAAGC,aAD7B,SAC8Cd,KAAKC,SAAL,CAAeY,GAAGE,SAAH,CAAaC,KAA5B,EAAmC,IAAnC,EAAyC,CAAzC,CAD9C;;AAIAC,oBAAgBC,OAAhB,CAAwB,UAACC,QAAD,EAAc;AACpCA,eAASf,GAAT,EAAcS,EAAd;AACD,KAFD;;AAIAT,QAAIgB,mCAAJ,CAAwC,iCAA8BP,EAA9B,CAAxC;AACAQ,oBAAcH,OAAd,CAAsB,UAACC,QAAD,EAAc;AAClCA,eAASf,GAAT,EAAcS,EAAd;AACD,KAFD;AAGAT,QAAIkB,oCAAJ;;AAEA,QAAIjB,QAAQkB,GAAR,CAAYC,QAAZ,IAAwB,KAA5B,EAAmC;AACjC,UAAMC,eAAeC,QAAQ,0BAAR,EAAoCC,OAAzD;AACAF,mBAAaP,OAAb,CAAqB,UAACC,QAAD,EAAc;AACjCA,iBAASf,GAAT,EAAcS,EAAd;AACD,OAFD;AAGD;;AAED,WAAOA,EAAP;AACD,GAxBI,EAyBJD,IAzBI,CAyBC,YAAM;AACV,WAAO,IAAIgB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA;AACA;AACA;AACA,UAAMC,SAAS1B,QAAQkB,GAAR,CAAYC,QAAZ,KAAyB,KAAzB,GACXQ,gBAAMC,YAAN,CAAmB;AACnBC,aAAKC,aAAGC,YAAH,CAAgB,yBAAhB,CADc;AAEnBC,cAAMF,aAAGC,YAAH,CAAgB,yBAAhB;AAFa,OAAnB,EAGChC,GAHD,CADW,GAKXkC,eAAKL,YAAL,CAAkB7B,GAAlB,CALJ;AAMA,UAAImC,WAAWR,OAAOS,MAAP,CAAcrC,QAAQE,QAAQkB,GAAR,CAAYkB,IAApB,IAA4B,IAA1C,EAAgD,UAACC,GAAD,EAAS;AACtE,YAAIA,GAAJ,EAAS;AACPZ,iBAAOY,GAAP;AACD,SAFD,MAEO;AACL5C,2BAAOC,IAAP,oCAA6CwC,SAASI,OAAT,GAAmBxC,IAAhE;AACA0B,kBAAQU,QAAR;AACD;AACF,OAPc,CAAf;AAQD,KAnBM,CAAP;AAoBD,GA9CI,CAAP;AA+CD;;AAED,IAAIb,QAAQkB,IAAR,KAAiBC,MAArB,EAA6B;AAC3BhD,UACGe,IADH,CACQ,UAACkC,SAAD,EAAe;AACnBC,4BAAcC,aAAd;AACD,GAHH;AAID","file":"server.js","sourcesContent":["import bodyParser from 'body-parser';\nimport express from 'express';\nimport 'express-csv';\nimport fs from 'fs';\nimport https from 'https';\nimport http from 'http';\n\nimport constant from 'common/constant';\nimport logger from 'common/logger';\nimport DataHandler from 'server/store/DataHandler';\nimport ExpressHelper from 'server/helper/ExpressHelper';\nimport FBGraphHelper from 'server/helper/FBGraphHelper';\n\nimport authEndpoints from 'server/authEndpoint/index';\nimport noAuthEndpoints from 'server/noAuthEndpoint/index';\nimport checkForAccessTokenMiddleware from 'server/helper/AccessTokenHelper';\n\nlogger.info(`app will run with constant like: ${JSON.stringify(constant, null, 2)}`);\n\nexport function start(port) {\n  let app = ExpressHelper(express(), process.cwd(), logger);\n  app.use(bodyParser.json());\n\n  return DataHandler.get()\n    .then((dh) => {\n      logger.info(\n        `data handler init as ${dh.datastoreType} ${JSON.stringify(dh.datastore.paths, null, 2)}`,\n      );\n\n      noAuthEndpoints.forEach((initFunc) => {\n        initFunc(app, dh);\n      });\n\n      app.enableSecureCheckForFollowingRoutes(checkForAccessTokenMiddleware(dh));\n      authEndpoints.forEach((initFunc) => {\n        initFunc(app, dh);\n      });\n      app.disableSecureCheckForFollowingRoutes();\n\n      if (process.env.NODE_ENV == 'dev') {\n        const devEndpoints = require('server/devEndpoint/index').default;\n        devEndpoints.forEach((initFunc) => {\n          initFunc(app, dh);\n        });\n      }\n\n      return dh;\n    })\n    .then(() => {\n      return new Promise((resolve, reject) => {\n        // liyuhk: for heroku, according to:\n        // https://stackoverflow.com/questions/25148507/https-ssl-on-heroku-node-express\n        // we do not need to deal with https, as heroku has us covered with their https router,\n        // so only for local dev  we start an https server\n        const server = process.env.NODE_ENV === 'dev'\n          ? https.createServer({\n            key: fs.readFileSync('./var/server/server.key'),\n            cert: fs.readFileSync('./var/server/server.crt')\n          }, app)\n          : http.createServer(app);\n        let listener = server.listen(port || process.env.PORT || 5000, (err) => {\n          if (err) {\n            reject(err);\n          } else {\n            logger.info(`Your app is listening on port ${listener.address().port}`);\n            resolve(listener);\n          }\n        });\n      });\n    });\n}\n\nif (require.main === module) {\n  start()\n    .then((_listener) => {\n      FBGraphHelper.setWebsiteURL();\n    });\n}\n"]}