{"version":3,"sources":["../../server/server.js"],"names":["start","logger","info","JSON","stringify","constant","port","app","process","cwd","use","bodyParser","json","parseInt","env","PORT","DataHandler","get","then","dh","datastoreType","datastore","paths","noAuthEndpoints","forEach","initFunc","enableSecureCheckForFollowingRoutes","authEndpoints","disableSecureCheckForFollowingRoutes","NODE_ENV","devEndpoints","require","default","Promise","resolve","reject","request","uri","body","HEROKU_APP_URL","catch","err","server","http","createServer","listener","listen","address","main","module","_listener","FBGraphHelper","setWebsiteURL","error","message"],"mappings":"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","file":"server.js","sourcesContent":["import bodyParser from 'body-parser';\nimport express from 'express';\nimport 'express-csv';\nimport http from 'http';\nimport request from 'request-promise';\n\nimport constant from 'common/constant';\nimport logger from 'common/logger';\nimport DataHandler from 'server/store/DataHandler';\nimport ExpressHelper from 'server/helper/ExpressHelper';\nimport FBGraphHelper from 'server/helper/FBGraphHelper';\n\nimport authEndpoints from 'server/authEndpoint/index';\nimport noAuthEndpoints from 'server/noAuthEndpoint/index';\nimport checkForAccessTokenMiddleware from 'server/helper/AccessTokenHelper';\n\nlogger.info(`app will run with constant like: ${JSON.stringify(constant, null, 2)}`);\n\nexport function start(port) {\n  const app = ExpressHelper(express(), process.cwd(), logger);\n  app.use(bodyParser.json());\n\n  if (!port) {\n    port = parseInt(process.env.PORT || 5000, 10);\n  }\n\n  return DataHandler.get()\n    .then((dh) => {\n      logger.info(\n        `data handler init as ${dh.datastoreType} ${JSON.stringify(dh.datastore.paths, null, 2)}`,\n      );\n\n      noAuthEndpoints.forEach((initFunc) => {\n        initFunc(app, dh);\n      });\n\n      app.enableSecureCheckForFollowingRoutes(checkForAccessTokenMiddleware(dh));\n      authEndpoints.forEach((initFunc) => {\n        initFunc(app, dh);\n      });\n      app.disableSecureCheckForFollowingRoutes();\n\n      if (process.env.NODE_ENV == 'dev') {\n        const devEndpoints = require('server/devEndpoint/index').default;\n        devEndpoints.forEach((initFunc) => {\n          initFunc(app, dh);\n        });\n      }\n\n      return dh;\n    })\n    .then(() => {\n      return new Promise((resolve, reject) => {\n        if (process.env.NODE_ENV === 'dev') {\n          request.get({\n            uri: `http://localhost:${port+1}/localtunnel`\n          })\n          .then((body) => {\n            constant.HEROKU_APP_URL = body;\n            resolve();\n          })\n          .catch((err) => {\n            reject(err);\n          });\n        } else {\n          resolve();\n        }\n      });\n    })\n    .then(() => {\n      return new Promise((resolve, reject) => {\n        const server = http.createServer(app);\n        let listener = server.listen(port, (err) => {\n          if (err) {\n            reject(err);\n          } else {\n            logger.info(`Your app is listening on port ${listener.address().port}`);\n            if (process.env.NODE_ENV === 'dev') {\n              logger.info(`Please access your server with tunnel:*** ${constant.HEROKU_APP_URL} ***`);\n            }\n            resolve(listener);\n          }\n        });\n      });\n    });\n}\n\nif (require.main === module) {\n  start()\n    .then((_listener) => {\n      FBGraphHelper.setWebsiteURL();\n    }).catch((err) => {\n      logger.error(`Unable to set Website URL: ${err.message}`);\n    });\n}\n"]}