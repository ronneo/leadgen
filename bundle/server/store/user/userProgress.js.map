{"version":3,"sources":["../../../../server/store/user/userProgress.js"],"names":["UserProgress","datahandler","datastore","userID","userProgress","Promise","resolve","_reject","_read","paths","user_progress","then","data","JSON","parse","catch","err","logger","error","stringify","info","_write","options","Object","assign","save","questionFlow","payload","stopAtQid","question","findQuestionWithQid","findNextQidOfQuestionInOptions","elements","findNextQidOfQuestionInElements","findNextQidOfQuestion","_del"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,Y;AACnB,wBAAYC,WAAZ,EAAyB;AAAA;;AACvB,SAAKC,SAAL,GAAiBD,YAAYC,SAA7B;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,YAAL,GAAoB,IAApB;AACD;;;;yBAEID,M,EAAQ;AAAA;;AACX,WAAKA,MAAL,GAAcA,MAAd;AACA,aAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,OAAV,EAAsB;AACvC,cAAKL,SAAL,CAAeM,KAAf,CAAqB,MAAKN,SAAL,CAAeO,KAAf,CAAqBC,aAA1C,EAAyD,MAAKP,MAA9D,EACGQ,IADH,CACQ,UAACC,IAAD,EAAU;AACd,gBAAKR,YAAL,GAAoBS,KAAKC,KAAL,CAAWF,IAAX,CAApB;AACAN,kBAAQ,KAAR;AACD,SAJH,EAKGS,KALH,CAKS,UAACC,GAAD,EAAS;AACdC,2BAAOC,KAAP,gBAA0B,MAAKf,MAA/B,+BAA+DU,KAAKM,SAAL,CAAeH,GAAf,CAA/D;AACAC,2BAAOG,IAAP,mCAA4C,MAAKjB,MAAjD;AACA,gBAAKC,YAAL,GAAoB,EAApB;AACAE,kBAAQ,KAAR;AACD,SAVH;AAWD,OAZM,CAAP;AAaD;;;2BAEM;AAAA;;AACL,aAAO,KAAKJ,SAAL,CAAemB,MAAf,CACL,KAAKnB,SAAL,CAAeO,KAAf,CAAqBC,aADhB,EAEL,KAAKP,MAFA,EAGLU,KAAKM,SAAL,CAAe,KAAKf,YAApB,CAHK,EAKNO,IALM,CAKD,YAAM;AACVM,yBAAOG,IAAP,WAAoB,OAAKjB,MAAzB;AACA,eAAO,MAAP;AACD,OARM,EASNY,KATM,CASA,UAACC,GAAD,EAAS;AACdC,yBAAOC,KAAP,gBAA0B,OAAKf,MAA/B,8BAA8DU,KAAKM,SAAL,CAAeH,GAAf,CAA9D;AACA,eAAOA,GAAP;AACD,OAZM,CAAP;AAaD;;;2BAEMM,O,EAAS;AACd,WAAKlB,YAAL,GAAoBmB,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKpB,YAAvB,EAAqCkB,OAArC,CAApB;AACA,aAAO,KAAKG,IAAL,EAAP;AACD;;;gCAEWC,Y,EAAcC,O,EAAS;AAAA,UAC3BC,SAD2B,GACb,KAAKxB,YADQ,CAC3BwB,SAD2B;;AAEjC,UAAIC,WAAWH,aAAaI,mBAAb,CAAiCF,SAAjC,CAAf;AACA,UAAIC,SAASP,OAAb,EAAsB;AACpB,eAAOI,aAAaK,8BAAb,CAA4CF,QAA5C,EAAsDD,SAAtD,EAAiED,OAAjE,CAAP;AACD,OAFD,MAEO,IAAIE,SAASG,QAAb,EAAuB;AAC5B,eAAON,aAAaO,+BAAb,CAA6CJ,QAA7C,EAAuDD,SAAvD,EAAkED,OAAlE,CAAP;AACD,OAFM,MAEA;AACL,eAAOD,aAAaQ,qBAAb,CAAmCL,QAAnC,EAA6CD,SAA7C,CAAP;AACD;AACF;;;0BAEK;AACJ,aAAO,KAAK1B,SAAL,CAAeiC,IAAf,CAAoB,KAAKjC,SAAL,CAAeO,KAAf,CAAqBC,aAAzC,EAAwD,KAAKP,MAA7D,CAAP;AACD;;;;;;kBA3DkBH,Y","file":"userProgress.js","sourcesContent":["import logger from 'common/logger';\n\nexport default class UserProgress {\n  constructor(datahandler) {\n    this.datastore = datahandler.datastore;\n    this.userID = null;\n    this.userProgress = null;\n  }\n\n  load(userID) {\n    this.userID = userID;\n    return new Promise((resolve, _reject) => {\n      this.datastore._read(this.datastore.paths.user_progress, this.userID)\n        .then((data) => {\n          this.userProgress = JSON.parse(data);\n          resolve(this);\n        })\n        .catch((err) => {\n          logger.error(`load user ${this.userID} progress failed with: ${JSON.stringify(err)}`);\n          logger.info(`create new progress for user ${this.userID}`);\n          this.userProgress = [];\n          resolve(this);\n        });\n    });\n  }\n\n  save() {\n    return this.datastore._write(\n      this.datastore.paths.user_progress,\n      this.userID,\n      JSON.stringify(this.userProgress),\n    )\n    .then(() => {\n      logger.info(`user ${this.userID} progess saved.`);\n      return this;\n    })\n    .catch((err) => {\n      logger.error(`save user ${this.userID} progress failed with ${JSON.stringify(err)}`);\n      return err;\n    });\n  }\n\n  update(options) {\n    this.userProgress = Object.assign({}, this.userProgress, options);\n    return this.save();\n  }\n\n  findNextQid(questionFlow, payload) {\n    let { stopAtQid } = this.userProgress;\n    let question = questionFlow.findQuestionWithQid(stopAtQid);\n    if (question.options) {\n      return questionFlow.findNextQidOfQuestionInOptions(question, stopAtQid, payload);\n    } else if (question.elements) {\n      return questionFlow.findNextQidOfQuestionInElements(question, stopAtQid, payload);\n    } else {\n      return questionFlow.findNextQidOfQuestion(question, stopAtQid);\n    }\n  }\n\n  del() {\n    return this.datastore._del(this.datastore.paths.user_progress, this.userID);\n  }\n}\n"]}