{"version":3,"sources":["../../../../server/store/user/userResponse.js"],"names":["UserResponse","datahandler","datastore","userID","userResponses","Promise","resolve","_reject","_read","paths","user_response","then","data","JSON","parse","catch","err","logger","error","stringify","info","_write","response","push","save","_del"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,Y;AACnB,wBAAYC,WAAZ,EAAyB;AAAA;;AACvB,SAAKC,SAAL,GAAiBD,YAAYC,SAA7B;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,aAAL,GAAqB,IAArB;AACD;;;;yBAEID,M,EAAQ;AAAA;;AACX,WAAKA,MAAL,GAAcA,MAAd;AACA,aAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,OAAV,EAAsB;AACvC,cAAKL,SAAL,CAAeM,KAAf,CAAqB,MAAKN,SAAL,CAAeO,KAAf,CAAqBC,aAA1C,EAAyD,MAAKP,MAA9D,EACGQ,IADH,CACQ,UAACC,IAAD,EAAU;AACd,gBAAKR,aAAL,GAAqBS,KAAKC,KAAL,CAAWF,IAAX,CAArB;AACAN,kBAAQ,KAAR;AACD,SAJH,EAKGS,KALH,CAKS,UAACC,GAAD,EAAS;AACdC,2BAAOC,KAAP,gBAA0B,MAAKf,MAA/B,8BAA8DU,KAAKM,SAAL,CAAeH,GAAf,CAA9D;AACAC,2BAAOG,IAAP,mCAA4C,MAAKjB,MAAjD;AACA,gBAAKC,aAAL,GAAqB,EAArB;AACAE,kBAAQ,KAAR;AACD,SAVH;AAWD,OAZM,CAAP;AAaD;;;2BAEM;AAAA;;AACL,aAAO,KAAKJ,SAAL,CAAemB,MAAf,CACL,KAAKnB,SAAL,CAAeO,KAAf,CAAqBC,aADhB,EAEL,KAAKP,MAFA,EAGLU,KAAKM,SAAL,CAAe,KAAKf,aAApB,CAHK,EAKNO,IALM,CAKD,YAAM;AACVM,yBAAOG,IAAP,WAAoB,OAAKjB,MAAzB;AACA,eAAO,MAAP;AACD,OARM,EASNY,KATM,CASA,UAACC,GAAD,EAAS;AACdC,yBAAOC,KAAP,gBAA0B,OAAKf,MAA/B,8BAA8DU,KAAKM,SAAL,CAAeH,GAAf,CAA9D;AACA,eAAOA,GAAP;AACD,OAZM,CAAP;AAaD;;;yBAEIM,Q,EAAU;AACb,WAAKlB,aAAL,CAAmBmB,IAAnB,CAAwBD,QAAxB;AACA,aAAO,KAAKE,IAAL,EAAP;AACD;;;0BAEK;AACJ,aAAO,KAAKtB,SAAL,CAAeuB,IAAf,CAAoB,KAAKvB,SAAL,CAAeO,KAAf,CAAqBC,aAAzC,EAAwD,KAAKP,MAA7D,CAAP;AACD;;;;;;kBA/CkBH,Y","file":"userResponse.js","sourcesContent":["import logger from 'common/logger';\n\nexport default class UserResponse {\n  constructor(datahandler) {\n    this.datastore = datahandler.datastore;\n    this.userID = null;\n    this.userResponses = null;\n  }\n\n  load(userID) {\n    this.userID = userID;\n    return new Promise((resolve, _reject) => {\n      this.datastore._read(this.datastore.paths.user_response, this.userID)\n        .then((data) => {\n          this.userResponses = JSON.parse(data);\n          resolve(this);\n        })\n        .catch((err) => {\n          logger.error(`load user ${this.userID} response failed with ${JSON.stringify(err)}`);\n          logger.info(`create new response for user ${this.userID}`);\n          this.userResponses = [];\n          resolve(this);\n        });\n    });\n  }\n\n  save() {\n    return this.datastore._write(\n      this.datastore.paths.user_response,\n      this.userID,\n      JSON.stringify(this.userResponses),\n    )\n    .then(() => {\n      logger.info(`user ${this.userID} response saved.`);\n      return this;\n    })\n    .catch((err) => {\n      logger.error(`save user ${this.userID} response failed with ${JSON.stringify(err)}`);\n      return err;\n    });\n  }\n\n  push(response) {\n    this.userResponses.push(response);\n    return this.save();\n  }\n\n  del() {\n    return this.datastore._del(this.datastore.paths.user_response, this.userID);\n  }\n}\n"]}