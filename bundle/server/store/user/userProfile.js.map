{"version":3,"sources":["../../../../server/store/user/userProfile.js"],"names":["UserProfile","datahandler","datastore","userID","userProfile","profileFetched","Promise","resolve","_reject","_read","paths","user_profile","then","data","JSON","parse","catch","err","logger","error","stringify","info","_write","profile","Object","assign","save","_del"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,W;AACnB,uBAAYC,WAAZ,EAAyB;AAAA;;AACvB,SAAKC,SAAL,GAAiBD,YAAYC,SAA7B;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACD;;;;yBAEIF,M,EAAQ;AAAA;;AACX,WAAKA,MAAL,GAAcA,MAAd;AACA,aAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,OAAV,EAAsB;AACvC,cAAKN,SAAL,CAAeO,KAAf,CAAqB,MAAKP,SAAL,CAAeQ,KAAf,CAAqBC,YAA1C,EAAwD,MAAKR,MAA7D,EACGS,IADH,CACQ,UAACC,IAAD,EAAU;AACd,gBAAKT,WAAL,GAAmBU,KAAKC,KAAL,CAAWF,IAAX,CAAnB;AACA,gBAAKR,cAAL,GAAsB,IAAtB;AACAE,kBAAQ,KAAR;AACD,SALH,EAMGS,KANH,CAMS,UAACC,GAAD,EAAS;AACdC,2BAAOC,KAAP,gBAA0B,MAAKhB,MAA/B,6BAA6DW,KAAKM,SAAL,CAAeH,GAAf,CAA7D;AACAC,2BAAOG,IAAP,sBAA+B,MAAKlB,MAApC;AACA,gBAAKC,WAAL,GAAmB,IAAnB;AACA,gBAAKC,cAAL,GAAsB,KAAtB;AACAE,kBAAQ,KAAR;AACD,SAZH;AAaD,OAdM,CAAP;AAeD;;;uCAEkB;AACjB,aAAO,KAAKF,cAAZ;AACD;;;2BAEM;AAAA;;AACL,aAAO,KAAKH,SAAL,CAAeoB,MAAf,CACL,KAAKpB,SAAL,CAAeQ,KAAf,CAAqBC,YADhB,EAEL,KAAKR,MAFA,EAGLW,KAAKM,SAAL,CAAe,KAAKhB,WAApB,CAHK,EAKNQ,IALM,CAKD,YAAM;AACVM,yBAAOG,IAAP,WAAoB,OAAKlB,MAAzB;AACA,eAAO,MAAP;AACD,OARM,EASNa,KATM,CASA,UAACC,GAAD,EAAS;AACdC,yBAAOC,KAAP,gBAA0B,OAAKhB,MAA/B,6BAA6DW,KAAKM,SAAL,CAAeH,GAAf,CAA7D;AACA,eAAOA,GAAP;AACD,OAZM,CAAP;AAaD;;;2BAEMM,O,EAAS;AACd,WAAKnB,WAAL,GAAmBoB,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKrB,WAAvB,EAAoCmB,OAApC,CAAnB;AACA,aAAO,KAAKG,IAAL,EAAP;AACD;;;0BAEK;AACJ,aAAO,KAAKxB,SAAL,CAAeyB,IAAf,CAAoB,KAAKzB,SAAL,CAAeQ,KAAf,CAAqBC,YAAzC,EAAuD,KAAKR,MAA5D,CAAP;AACD;;;;;;kBAtDkBH,W","file":"userProfile.js","sourcesContent":["import logger from 'common/logger';\n\nexport default class UserProfile {\n  constructor(datahandler) {\n    this.datastore = datahandler.datastore;\n    this.userID = null;\n    this.userProfile = null;\n    this.profileFetched = false;\n  }\n\n  load(userID) {\n    this.userID = userID;\n    return new Promise((resolve, _reject) => {\n      this.datastore._read(this.datastore.paths.user_profile, this.userID)\n        .then((data) => {\n          this.userProfile = JSON.parse(data);\n          this.profileFetched = true;\n          resolve(this);\n        })\n        .catch((err) => {\n          logger.error(`load user ${this.userID} profile failed with ${JSON.stringify(err)}`);\n          logger.info(`marking UserID: ${this.userID} as not fetched`);\n          this.userProfile = null;\n          this.profileFetched = false;\n          resolve(this);\n        });\n    });\n  }\n\n  isProfileFetched() {\n    return this.profileFetched;\n  }\n\n  save() {\n    return this.datastore._write(\n      this.datastore.paths.user_profile,\n      this.userID,\n      JSON.stringify(this.userProfile),\n    )\n    .then(() => {\n      logger.info(`user ${this.userID} profile saved.`);\n      return this;\n    })\n    .catch((err) => {\n      logger.error(`save user ${this.userID} profile failed with ${JSON.stringify(err)}`);\n      return err;\n    });\n  }\n\n  update(profile) {\n    this.userProfile = Object.assign({}, this.userProfile, profile);\n    return this.save();\n  }\n\n  del() {\n    return this.datastore._del(this.datastore.paths.user_profile, this.userID);\n  }\n}\n"]}