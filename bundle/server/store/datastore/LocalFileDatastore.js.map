{"version":3,"sources":["../../../../server/store/datastore/LocalFileDatastore.js"],"names":["LocalFileDataStore","path","key","Promise","resolve","reject","fs","readFile","formatFilePath","err","data","writeFile","the_path","dir","dirname","prefix","basename","readdir","files","keys","map","file","re","RegExp","m","exec","push","unlink","DataStore"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;;;;;;;IAEqBA,kB;;;AAEnB,gCAAc;AAAA;;AAAA;AAEb;;;;mCAEcC,I,EAAMC,G,EAAK;AACxB,aAAUD,IAAV,SAAkBC,GAAlB;AACD;;AAED;;;;0BACMD,I,EAAMC,G,EAAK;AAAA;;AACf,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,qBAAGC,QAAH,CAAY,OAAKC,cAAL,CAAoBP,IAApB,EAA0BC,GAA1B,CAAZ,EAA4C,UAACO,GAAD,EAAMC,IAAN,EAAe;AACzD,cAAID,GAAJ,EAAS;AACPJ,mBAAOI,GAAP;AACD,WAFD,MAEO;AACLL,oBAAQM,IAAR;AACD;AACF,SAND;AAOD,OARM,CAAP;AASD;;AAED;;;;2BACOT,I,EAAMC,G,EAAKQ,I,EAAM;AAAA;;AACtB,aAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,qBAAGK,SAAH,CAAa,OAAKH,cAAL,CAAoBP,IAApB,EAA0BC,GAA1B,CAAb,EAA6CQ,IAA7C,EAAmD,UAACD,GAAD,EAAS;AAC1D,cAAIA,GAAJ,EAAS;AACPJ,mBAAOI,GAAP;AACD,WAFD,MAEO;AACLL;AACD;AACF,SAND;AAOD,OARM,CAAP;AASD;;;0BAEKQ,Q,EAAU;AACd,UAAIC,MAAMZ,eAAKa,OAAL,CAAaF,QAAb,CAAV;AACA,UAAIG,SAASd,eAAKe,QAAL,CAAcJ,QAAd,CAAb;AACA,aAAO,IAAIT,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,qBAAGW,OAAH,CAAWJ,GAAX,EAAgB,UAACJ,GAAD,EAAMS,KAAN,EAAgB;AAC9B,cAAIT,GAAJ,EAAS;AACPJ,mBAAOI,GAAP;AACD,WAFD,MAEO;AACL,gBAAIU,OAAO,EAAX;AACAD,kBAAME,GAAN,CAAU,UAACC,IAAD,EAAU;AAClB,kBAAIC,KAAK,IAAIC,MAAJ,CAAWR,SAAS,eAApB,EAAqC,GAArC,CAAT;AACA,kBAAIS,IAAIF,GAAGG,IAAH,CAAQJ,IAAR,CAAR;AACA,kBAAIG,CAAJ,EAAO;AACLL,qBAAKO,IAAL,CAAUF,EAAE,CAAF,CAAV;AACD;AACF,aAND;AAOApB,oBAAQe,IAAR;AACD;AACF,SAdD;AAeD,OAhBM,CAAP;AAiBD;;;yBAEIlB,I,EAAMC,G,EAAK;AAAA;;AACd,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,qBAAGqB,MAAH,CAAU,OAAKnB,cAAL,CAAoBP,IAApB,EAA0BC,GAA1B,CAAV,EAA0C,UAACO,GAAD,EAAS;AACjD,cAAIA,GAAJ,EAAS;AACPJ,mBAAOI,GAAP;AACD,WAFD,MAEO;AACLL;AACD;AACF,SAND;AAOD,OARM,CAAP;AASD;;;;EApE6CwB,mB;;kBAA3B5B,kB","file":"LocalFileDatastore.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport DataStore from './DataStore';\n\nexport default class LocalFileDataStore extends DataStore {\n\n  constructor() {\n    super();\n  }\n\n  formatFilePath(path, key) {\n    return `${path}_${key}.json`;\n  }\n\n  // Override\n  _read(path, key) {\n    return new Promise((resolve, reject) => {\n      fs.readFile(this.formatFilePath(path, key), (err, data) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n  }\n\n  // Override\n  _write(path, key, data) {\n    return new Promise((resolve, reject) => {\n      fs.writeFile(this.formatFilePath(path, key), data, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  _scan(the_path) {\n    let dir = path.dirname(the_path);\n    let prefix = path.basename(the_path);\n    return new Promise((resolve, reject) => {\n      fs.readdir(dir, (err, files) => {\n        if (err) {\n          reject(err);\n        } else {\n          let keys = [];\n          files.map((file) => {\n            let re = new RegExp(prefix + '_([^_]+).json', 'g');\n            let m = re.exec(file);\n            if (m) {\n              keys.push(m[1]);\n            }\n          });\n          resolve(keys);\n        }\n      });\n    });\n  }\n\n  _del(path, key) {\n    return new Promise((resolve, reject) => {\n      fs.unlink(this.formatFilePath(path, key), (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n}\n"]}