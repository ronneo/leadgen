{"version":3,"sources":["../../../../server/store/__tests__/RedisDatastore.js"],"names":["user_response","qid","timeOfMessage","payload","jest","mock","redis","require","beforeAll","constant","REDISCLOUD_URL","test","thedh","DataHandler","get","then","dh","Promise","all","getUserResponse","user_response_mgr","push","datastore","_scan","paths","keys","expect","toMatchObject","userResponses","toHaveLength","toEqual"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,SAAO;AACLA,SAAKA,GADA;AAELC,mBAAe,QAFV;AAGLC,aAAS;AAHJ,GAAP;AAKD;;AAEDC,KAAKC,IAAL,CAAU,OAAV,EAAmB,YAAM;AACvB,MAAMC,QAAQC,QAAQ,UAAR,CAAd;AACA,SAAOD,KAAP;AACD,CAHD;;AAKAE,UAAU,YAAM;AACdC,qBAASC,cAAT,GAA0B,wBAA1B;AACD,CAFD;;AAIAC,KAAK,KAAL,EAAY,YAAM;AAChB,MAAIC,QAAQ,IAAZ;AACA,SAAOC,sBAAYC,GAAZ,GACJC,IADI,CACC,UAACC,EAAD,EAAQ;AACZJ,YAAQI,EAAR;AACA,WAAOC,QAAQC,GAAR,CAAY,CACjBF,GAAGG,eAAH,CAAmB,CAAnB,EACGJ,IADH,CACQ,UAACK,iBAAD,EAAuB;AAC3B,aAAOA,kBAAkBC,IAAlB,CAAuBrB,cAAc,CAAd,CAAvB,CAAP;AACD,KAHH,CADiB,EAKjBgB,GAAGG,eAAH,CAAmB,CAAnB,EACGJ,IADH,CACQ,UAACK,iBAAD,EAAuB;AAC3B,aAAOA,kBAAkBC,IAAlB,CAAuBrB,cAAc,CAAd,CAAvB,CAAP;AACD,KAHH,CALiB,CAAZ,CAAP;AAUD,GAbI,EAcJe,IAdI,CAcC,YAAM;AACV,WAAOH,MAAMU,SAAN,CAAgBC,KAAhB,CAAsBX,MAAMU,SAAN,CAAgBE,KAAhB,CAAsBxB,aAA5C,CAAP;AACD,GAhBI,EAiBJe,IAjBI,CAiBC,UAACU,IAAD,EAAU;AACdC,WAAOD,IAAP,EAAaE,aAAb,CACE,CAAC,GAAD,EAAM,GAAN,CADF;AAGA,WAAOf,MAAMO,eAAN,CAAsB,CAAtB,CAAP;AACD,GAtBI,EAuBJJ,IAvBI,CAuBC,UAACK,iBAAD,EAAuB;AAC3BM,WAAON,kBAAkBQ,aAAzB,EAAwCC,YAAxC,CAAqD,CAArD;AACAH,WAAON,kBAAkBQ,aAAlB,CAAgC,CAAhC,CAAP,EAA2CE,OAA3C,CAAmD;AACjD7B,WAAK,CAD4C;AAEjDC,qBAAe,QAFkC;AAGjDC,eAAS;AAHwC,KAAnD;AAKD,GA9BI,CAAP;AA+BD,CAjCD","file":"RedisDatastore.js","sourcesContent":["import constant from 'common/constant';\nimport DataHandler from 'server/store/DataHandler';\n\nfunction user_response(qid) {\n  return {\n    qid: qid, \n    timeOfMessage: 19700101, \n    payload: 'hello'\n  };\n}\n\njest.mock('redis', () => {\n  const redis = require('redis-js');\n  return redis;\n});\n\nbeforeAll(() => {\n  constant.REDISCLOUD_URL = 'http://localhost:12345';\n});\n\ntest('all', () => {\n  let thedh = null;\n  return DataHandler.get()\n    .then((dh) => {\n      thedh = dh;\n      return Promise.all([\n        dh.getUserResponse(4)\n          .then((user_response_mgr) => {\n            return user_response_mgr.push(user_response(1));\n          }),\n        dh.getUserResponse(5)\n          .then((user_response_mgr) => {\n            return user_response_mgr.push(user_response(1));\n          }),\n      ]);\n    })\n    .then(() => {\n      return thedh.datastore._scan(thedh.datastore.paths.user_response);\n    })\n    .then((keys) => {\n      expect(keys).toMatchObject(\n        ['4', '5'],\n      );\n      return thedh.getUserResponse(5);\n    })\n    .then((user_response_mgr) => {\n      expect(user_response_mgr.userResponses).toHaveLength(1);\n      expect(user_response_mgr.userResponses[0]).toEqual({\n        qid: 1, \n        timeOfMessage: 19700101, \n        payload: 'hello'\n      });\n    });\n});\n"]}