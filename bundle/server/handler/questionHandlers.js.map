{"version":3,"sources":["../../../server/handler/questionHandlers.js"],"names":["NEED_NO_ANSWER","NEED_ANSWER","questionHandlerMap","psid","question","userProfile","recipient","id","message","text","quick_replies","options","map","option","resp_payload","attachment","type","payload","template_type","buttons","url","title","urlText","questionExpectMap"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAMA,iBAAiB,IAAvB;AACA,IAAMC,cAAc,KAApB;;AAEO,IAAIC,qBAAqB;AAC9B,cAAY,kBAACC,IAAD,EAAOC,QAAP,EAAiBC,WAAjB,EAAiC;AAC3C,WAAO,CACL;AACEC,iBAAW,EAAEC,IAAIJ,IAAN,EADb;AAEEK,eAAS,EAAEC,MAAM,8BAAgBL,SAASK,IAAzB,EAA+BJ,WAA/B,CAAR;AAFX,KADK,EAKLL,cALK,CAAP;AAOD,GAT6B;;AAW9B,cAAY,kBAACG,IAAD,EAAOC,SAAP,EAAiBC,WAAjB,EAAiC;AAC3C,WAAO,CACL;AACEC,iBAAW,EAAEC,IAAIJ,IAAN,EADb;AAEEK,eAAS;AACPC,cAAM,8BAAgBL,UAASK,IAAzB,EAA+BJ,WAA/B,CADC;AAEPK,uBAAeN,UAASO,OAAT,CAAiBC,GAAjB,CAAqB,UAACC,MAAD,EAAY;AAC9C,iBAAO;AACL,4BAAgB,MADX;AAEL,qBAAS,8BAAgBA,OAAOJ,IAAvB,EAA6BJ,WAA7B,CAFJ;AAGL,uBAAWQ,OAAOC;AAHb,WAAP;AAKD,SANc;AAFR;AAFX,KADK,EAcLb,WAdK,CAAP;AAgBD,GA5B6B;;AA8B9B,WAAS,eAACE,IAAD,EAAOC,QAAP,EAAiBC,WAAjB,EAAiC;AACxC,WAAO,CACL;AACEC,iBAAW,EAAEC,IAAIJ,IAAN,EADb;AAEEK,eAAS,EAAEC,MAAM,8BAAgBL,SAASK,IAAzB,EAA+BJ,WAA/B,CAAR;AAFX,KADK,EAKLJ,WALK,CAAP;AAOD,GAtC6B;;AAwC9B,SAAO,YAACE,IAAD,EAAOC,QAAP,EAAiBC,WAAjB,EAAiC;AACtC,WAAO,CACL;AACEC,iBAAW,EAAEC,IAAIJ,IAAN,EADb;AAEEK,eAAS;AACPO,oBAAY;AACVC,gBAAM,UADI;AAEVC,mBAAS;AACPC,2BAAe,QADR;AAEPT,kBAAM,8BAAgBL,SAASK,IAAzB,EAA+BJ,WAA/B,CAFC;AAGPc,qBAAQ,CAAC;AACPH,oBAAM,SADC;AAEPI,mBAAKhB,SAASgB,GAFP;AAGPC,qBAAO,8BAAgBjB,SAASkB,OAAzB,EAAkCjB,WAAlC,CAHA;AAIP,sCAAwB;AAJjB,aAAD;AAHD;AAFC;AADL;AAFX,KADK,EAmBLL,cAnBK,CAAP;AAqBD;AA9D6B,CAAzB;;;AAiEA,IAAIuB,gDAAoB;AAC7B,cAAY,aADiB;AAE7B,WAAS;AAFoB,CAAxB","file":"questionHandlers.js","sourcesContent":["import render_template from 'server/helper/TemplateHelper';\n\nconst NEED_NO_ANSWER = true;\nconst NEED_ANSWER = false;\n\nexport let questionHandlerMap = {\n  'greeting': (psid, question, userProfile) => {\n    return [\n      {\n        recipient: { id: psid },\n        message: { text: render_template(question.text, userProfile) },\n      },\n      NEED_NO_ANSWER,\n    ];\n  },\n\n  'question': (psid, question, userProfile) => {\n    return [\n      {\n        recipient: { id: psid },\n        message: {\n          text: render_template(question.text, userProfile),\n          quick_replies: question.options.map((option) => {\n            return {\n              'content_type': 'text',\n              'title': render_template(option.text, userProfile),\n              'payload': option.resp_payload,\n            };\n          }),\n        },\n      },\n      NEED_ANSWER,\n    ];\n  },\n\n  'input': (psid, question, userProfile) => {\n    return [\n      {\n        recipient: { id: psid },\n        message: { text: render_template(question.text, userProfile) },\n      },\n      NEED_ANSWER,\n    ];\n  },\n\n  't&c': (psid, question, userProfile) => {\n    return [\n      {\n        recipient: { id: psid },\n        message: {\n          attachment: {\n            type: 'template',\n            payload: {\n              template_type: 'button',\n              text: render_template(question.text, userProfile),\n              buttons:[{\n                type: 'web_url',\n                url: question.url,\n                title: render_template(question.urlText, userProfile),\n                'webview_height_ratio': 'compact'\n              }]\n            }\n          }\n        },\n      },\n      NEED_NO_ANSWER\n    ];\n  },\n};\n\nexport let questionExpectMap = {\n  'question': 'quick_reply',\n  'input': 'text_input',\n};\n"]}