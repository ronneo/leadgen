{"version":3,"sources":["../../../server/handler/questionHandlers.js"],"names":["NEED_NO_ANSWER","NEED_ANSWER","URL_REGEXP","questionHandlerMap","psid","question","userProfile","recipient","id","message","text","quick_replies","options","map","option","resp_payload","length","quick_reply","content_type","attachment","type","payload","template_type","buttons","url","title","urlText","elements","obj","subtitle","image_url","button","next","match","is_reusable","questionExpectMap"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAMA,iBAAiB,IAAvB;AACA,IAAMC,cAAc,KAApB;;AAEA,IAAMC,aAAa,+FAAnB;;AAEO,IAAIC,qBAAqB;AAC9B,cAAY,kBAACC,IAAD,EAAOC,QAAP,EAAiBC,WAAjB,EAAiC;AAC3C,WAAO,CACL;AACEC,iBAAW,EAAEC,IAAIJ,IAAN,EADb;AAEEK,eAAS,EAAEC,MAAM,8BAAgBL,SAASK,IAAzB,EAA+BJ,WAA/B,CAAR;AAFX,KADK,EAKLN,cALK,CAAP;AAOD,GAT6B;;AAW9B,cAAY,kBAACI,IAAD,EAAOC,SAAP,EAAiBC,WAAjB,EAAiC;AAC3C,WAAO,CACL;AACEC,iBAAW,EAAEC,IAAIJ,IAAN,EADb;AAEEK,eAAS;AACPC,cAAM,8BAAgBL,UAASK,IAAzB,EAA+BJ,WAA/B,CADC;AAEPK,uBAAeN,UAASO,OAAT,CAAiBC,GAAjB,CAAqB,UAACC,MAAD,EAAY;AAC9C,iBAAO;AACL,4BAAgB,MADX;AAEL,qBAAS,8BAAgBA,OAAOJ,IAAvB,EAA6BJ,WAA7B,CAFJ;AAGL,uBAAWQ,OAAOC;AAHb,WAAP;AAKD,SANc;AAFR;AAFX,KADK,EAcLd,WAdK,CAAP;AAgBD,GA5B6B;;AA8B9B,WAAS,eAACG,IAAD,EAAOC,QAAP,EAAiBC,WAAjB,EAAiC;AACxC,QAAIK,gBAAgBN,SAASM,aAAT,IAA0B,EAA9C;AACA,QAAIA,cAAcK,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,aAAO,CACL;AACET,mBAAW,EAAEC,IAAIJ,IAAN,EADb;AAEEK,iBAAS,EAAEC,MAAM,8BAAgBL,SAASK,IAAzB,EAA+BJ,WAA/B,CAAR;AAFX,OADK,EAKLL,WALK,CAAP;AAOD;AACD,WAAO,CACL;AACEM,iBAAW,EAAEC,IAAIJ,IAAN,EADb;AAEEK,eAAS;AACPC,cAAM,8BAAgBL,SAASK,IAAzB,EAA+BJ,WAA/B,CADC;AAEPK,uBAAeA,cAAcE,GAAd,CAAkB,UAACI,WAAD,EAAiB;AAChD,iBAAQ;AACNC,0BAAcD,YAAYC;AADpB,WAAR;AAGD,SAJc;AAFR;AAFX,KADK,EAYLjB,WAZK,CAAP;AAcD,GAvD6B;;AAyD9B,SAAO,YAACG,IAAD,EAAOC,QAAP,EAAiBC,WAAjB,EAAiC;AACtC,WAAO,CACL;AACEC,iBAAW,EAAEC,IAAIJ,IAAN,EADb;AAEEK,eAAS;AACPU,oBAAY;AACVC,gBAAM,UADI;AAEVC,mBAAS;AACPC,2BAAe,QADR;AAEPZ,kBAAM,8BAAgBL,SAASK,IAAzB,EAA+BJ,WAA/B,CAFC;AAGPiB,qBAAQ,CAAC;AACPH,oBAAM,SADC;AAEPI,mBAAKnB,SAASmB,GAFP;AAGPC,qBAAO,8BAAgBpB,SAASqB,OAAzB,EAAkCpB,WAAlC,CAHA;AAIP,sCAAwB;AAJjB,aAAD;AAHD;AAFC;AADL;AAFX,KADK,EAmBLN,cAnBK,CAAP;AAqBD,GA/E6B;;AAiF9B,cAAY,kBAACI,IAAD,EAAOC,QAAP,EAAiBC,WAAjB,EAAiC;AAC3C,WAAO,CACL;AACEC,iBAAW,EAAEC,IAAIJ,IAAN,EADb;AAEEK,eAAS;AACPU,oBAAY;AACVC,gBAAM,UADI;AAEVC,mBAAS;AACPC,2BAAe,SADR;AAEPK,sBAAUtB,SAASsB,QAAT,CAAkBd,GAAlB,CAAsB,UAACR,QAAD,EAAc;AAC5C,kBAAIuB,MAAM;AACRH,uBAAO,8BAAgBpB,SAASoB,KAAzB,EAAgCnB,WAAhC,CADC;AAERuB,0BAAU,8BAAgBxB,SAASwB,QAAzB,EAAmCvB,WAAnC,CAFF;AAGRwB,2BAAWzB,SAASyB;AAHZ,eAAV;;AAMA,kBAAIzB,SAASkB,OAAT,IAAoBlB,SAASkB,OAAT,CAAiBP,MAAjB,GAA0B,CAAlD,EAAqD;AACnDY,oBAAIL,OAAJ,GAAclB,SAASkB,OAAT,CAAiBV,GAAjB,CAAqB,UAACkB,MAAD,EAAY;AAC7C,sBAAIA,OAAOC,IAAP,IAAe,CAAED,OAAOP,GAAP,CAAWS,KAAX,CAAiB/B,UAAjB,CAArB,EAAoD;AAClD,2BAAO;AACLkB,4BAAM,UADD;AAELK,6BAAO,8BAAgBM,OAAON,KAAvB,EAA8BnB,WAA9B,CAFF;AAGLe,+BAASU,OAAOP;AAHX,qBAAP;AAKD,mBAND,MAMO;AACL,2BAAO;AACLJ,4BAAM,SADD;AAELK,6BAAO,8BAAgBM,OAAON,KAAvB,EAA8BnB,WAA9B,CAFF;AAGLkB,2BAAKO,OAAOP;AAHP,qBAAP;AAKD;AACF,iBAda,CAAd;AAeD;;AAED,qBAAOI,GAAP;AACD,aA1BS;AAFH;AAFC;AADL;AAFX,KADK,EAuCJvB,SAAS2B,IAAT,GAAchC,cAAd,GAA6BC,WAvCzB,CAAP;AAyCD,GA3H6B;AA4H9B,WAAS,eAACG,IAAD,EAAOC,QAAP,EAAiBC,WAAjB,EAAiC;AACxC,WAAO,CACL;AACEC,iBAAW,EAAEC,IAAIJ,IAAN,EADb;AAEEK,eAAS;AACPU,oBAAY;AACVC,gBAAK,OADK;AAEVC,mBAAQ;AACNG,iBAAKnB,SAASmB,GADR;AAENU,yBAAa;AAFP;AAFE;AADL;AAFX,KADK,EAaLlC,cAbK,CAAP;AAeD;AA5I6B,CAAzB;;;AA+IA,IAAImC,gDAAoB;AAC7B,cAAY,aADiB;AAE7B,WAAS,YAFoB;AAG7B,cAAY;AAHiB,CAAxB","file":"questionHandlers.js","sourcesContent":["import render_template from 'server/helper/TemplateHelper';\n\nconst NEED_NO_ANSWER = true;\nconst NEED_ANSWER = false;\n\nconst URL_REGEXP = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/gi;\n\nexport let questionHandlerMap = {\n  'greeting': (psid, question, userProfile) => {\n    return [\n      {\n        recipient: { id: psid },\n        message: { text: render_template(question.text, userProfile) },\n      },\n      NEED_NO_ANSWER,\n    ];\n  },\n\n  'question': (psid, question, userProfile) => {\n    return [\n      {\n        recipient: { id: psid },\n        message: {\n          text: render_template(question.text, userProfile),\n          quick_replies: question.options.map((option) => {\n            return {\n              'content_type': 'text',\n              'title': render_template(option.text, userProfile),\n              'payload': option.resp_payload,\n            };\n          }),\n        },\n      },\n      NEED_ANSWER,\n    ];\n  },\n\n  'input': (psid, question, userProfile) => {\n    let quick_replies = question.quick_replies || [];\n    if (quick_replies.length === 0) {\n      return [\n        {\n          recipient: { id: psid },\n          message: { text: render_template(question.text, userProfile) },\n        },\n        NEED_ANSWER,\n      ];\n    }\n    return [\n      {\n        recipient: { id: psid },\n        message: {\n          text: render_template(question.text, userProfile),\n          quick_replies: quick_replies.map((quick_reply) => {\n            return ({\n              content_type: quick_reply.content_type,\n            });\n          })\n        },\n      },\n      NEED_ANSWER,\n    ];\n  },\n\n  't&c': (psid, question, userProfile) => {\n    return [\n      {\n        recipient: { id: psid },\n        message: {\n          attachment: {\n            type: 'template',\n            payload: {\n              template_type: 'button',\n              text: render_template(question.text, userProfile),\n              buttons:[{\n                type: 'web_url',\n                url: question.url,\n                title: render_template(question.urlText, userProfile),\n                'webview_height_ratio': 'compact'\n              }]\n            }\n          }\n        },\n      },\n      NEED_NO_ANSWER\n    ];\n  },\n\n  'carousel': (psid, question, userProfile) => {\n    return [\n      {\n        recipient: { id: psid },\n        message: {\n          attachment: {\n            type: 'template',\n            payload: {\n              template_type: 'generic',\n              elements: question.elements.map((question) => {\n                var obj = {\n                  title: render_template(question.title, userProfile),\n                  subtitle: render_template(question.subtitle, userProfile),\n                  image_url: question.image_url,\n                };\n\n                if (question.buttons && question.buttons.length > 0) {\n                  obj.buttons = question.buttons.map((button) => {\n                    if (button.next || !(button.url.match(URL_REGEXP))) {\n                      return {\n                        type: 'postback',\n                        title: render_template(button.title, userProfile),\n                        payload: button.url,\n                      };\n                    } else {\n                      return {\n                        type: 'web_url',\n                        title: render_template(button.title, userProfile),\n                        url: button.url,\n                      };\n                    }\n                  });\n                }\n\n                return obj;\n              }),\n            }\n          }\n        },\n      },\n      (question.next?NEED_NO_ANSWER:NEED_ANSWER)\n    ];\n  },\n  'image': (psid, question, userProfile) => {\n    return [\n      {\n        recipient: { id: psid },\n        message: {\n          attachment: {\n            type:'image',\n            payload:{\n              url: question.url,\n              is_reusable: true\n            }\n          }\n        },\n      },\n      NEED_NO_ANSWER,\n    ];\n  },\n};\n\nexport let questionExpectMap = {\n  'question': 'quick_reply',\n  'input': 'text_input',\n  'carousel': 'postback',\n};\n"]}