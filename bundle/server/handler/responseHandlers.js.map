{"version":3,"sources":["../../../server/handler/responseHandlers.js"],"names":["responseHandlerMap","_message","_event","_questionFlow","_userProgress","_userResponse","Promise","_resolve","reject","message","event","questionFlow","userProgress","userResponse","resolve","quick_reply","timeOfMessage","timestamp","payload","stopAtQid","nextQid","findNextQid","push","qid","then","catch","err","Error","messageText","text"],"mappings":";;;;;AAAO,IAAIA,kDAAqB;AAC9B,aAAW,iBAACC,QAAD,EAAWC,MAAX,EAAmBC,aAAnB,EAAkCC,aAAlC,EAAiDC,aAAjD,EAAmE;AAC5E,WAAO,IAAIC,OAAJ,CAAY,UAACC,QAAD,EAAWC,MAAX,EAAsB;AACvCA;AACD,KAFM,CAAP;AAGD,GAL6B;;AAO9B,iBAAe,qBAACC,OAAD,EAAUC,KAAV,EAAiBC,YAAjB,EAA+BC,YAA/B,EAA6CC,YAA7C,EAA8D;AAC3E,WAAO,IAAIP,OAAJ,CAAY,UAACQ,OAAD,EAAUN,MAAV,EAAqB;AACtC,UAAIO,cAAcN,QAAQM,WAA1B;AACA,UAAIC,gBAAgBN,MAAMO,SAA1B;AACA,UAAIF,WAAJ,EAAiB;AACf,YAAIG,UAAUH,YAAYG,OAA1B;AADe,YAEVC,SAFU,GAEGP,aAAaA,YAFhB,CAEVO,SAFU;;AAGf,YAAIC,UAAUR,aAAaS,WAAb,CAAyBV,YAAzB,EAAuCO,OAAvC,CAAd;AACAL,qBAAaS,IAAb,CAAkB,EAAEC,KAAKJ,SAAP,EAAkBH,4BAAlB,EAAiCE,gBAAjC,EAAlB,EACGM,IADH,CACQ,YAAM;AACVV,kBAAQM,OAAR;AACD,SAHH,EAIGK,KAJH,CAIS,UAACC,GAAD,EAAS;AACdlB,iBAAOkB,GAAP;AACD,SANH;AAOD,OAXD,MAWO;AACLlB,eAAO,IAAImB,KAAJ,CAAU,2BAAV,CAAP;AACD;AACF,KAjBM,CAAP;AAkBD,GA1B6B;;AA4B9B,gBAAc,oBAAClB,OAAD,EAAUC,KAAV,EAAiBC,YAAjB,EAA+BC,YAA/B,EAA6CC,YAA7C,EAA8D;AAC1E,WAAO,IAAIP,OAAJ,CAAY,UAACQ,OAAD,EAAUN,MAAV,EAAqB;AACtC,UAAIoB,cAAcnB,QAAQoB,IAA1B;AACA,UAAIb,gBAAgBN,MAAMO,SAA1B;AACA,UAAIW,WAAJ,EAAiB;AACf,YAAIV,UAAUU,WAAd;AADe,YAEVT,SAFU,GAEGP,aAAaA,YAFhB,CAEVO,SAFU;;AAGf,YAAIC,UAAUR,aAAaS,WAAb,CAAyBV,YAAzB,EAAuCO,OAAvC,CAAd;AACAL,qBAAaS,IAAb,CAAkB,EAAEC,KAAKJ,SAAP,EAAkBH,4BAAlB,EAAiCE,gBAAjC,EAAlB,EACGM,IADH,CACQ,YAAM;AACVV,kBAAQM,OAAR;AACD,SAHH,EAIGK,KAJH,CAIS,UAACC,GAAD,EAAS;AACdlB,iBAAOkB,GAAP;AACD,SANH;AAOD,OAXD,MAWO;AACLlB,eAAO,IAAImB,KAAJ,CAAU,0BAAV,CAAP;AACD;AACF,KAjBM,CAAP;AAkBD,GA/C6B;;AAiD9B,cAAY,kBAAC1B,QAAD,EAAWC,MAAX,EAAmBC,aAAnB,EAAkCC,aAAlC,EAAiDC,aAAjD,EAAmE;AAC7E,WAAO,IAAIC,OAAJ,CAAY,UAACC,QAAD,EAAWC,MAAX,EAAsB;AACvCA;AACD,KAFM,CAAP;AAGD;AArD6B,CAAzB","file":"responseHandlers.js","sourcesContent":["export let responseHandlerMap = {\n  'genesis': (_message, _event, _questionFlow, _userProgress, _userResponse) => {\n    return new Promise((_resolve, reject) => {\n      reject();\n    });\n  },\n\n  'quick_reply': (message, event, questionFlow, userProgress, userResponse) => {\n    return new Promise((resolve, reject) => {\n      let quick_reply = message.quick_reply;\n      let timeOfMessage = event.timestamp;\n      if (quick_reply) {\n        let payload = quick_reply.payload;\n        let {stopAtQid} = userProgress.userProgress;\n        let nextQid = userProgress.findNextQid(questionFlow, payload);\n        userResponse.push({ qid: stopAtQid, timeOfMessage, payload })\n          .then(() => {\n            resolve(nextQid);\n          })\n          .catch((err) => {\n            reject(err);\n          });\n      } else {\n        reject(new Error('reply is not quick_reply.'));\n      } \n    });\n  },\n  \n  'text_input': (message, event, questionFlow, userProgress, userResponse) => {\n    return new Promise((resolve, reject) => {\n      let messageText = message.text;\n      let timeOfMessage = event.timestamp;\n      if (messageText) {\n        let payload = messageText;\n        let {stopAtQid} = userProgress.userProgress;\n        let nextQid = userProgress.findNextQid(questionFlow, payload);\n        userResponse.push({ qid: stopAtQid, timeOfMessage, payload })\n          .then(() => {\n            resolve(nextQid);\n          })\n          .catch((err) => {\n            reject(err);\n          });\n      } else {\n        reject(new Error('reply is not text_input.'));\n      }     \n    });\n  },\n\n  'finished': (_message, _event, _questionFlow, _userProgress, _userResponse) => {\n    return new Promise((_resolve, reject) => {\n      reject();\n    });\n  },\n};\n"]}