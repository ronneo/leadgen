{"version":3,"sources":["../../../server/noAuthEndpoint/webhook.js"],"names":["init","receivedMessage","event","dh","senderID","sender","id","recipientID","recipient","timeOfMessage","timestamp","message","logger","info","JSON","stringify","Promise","all","getQuestionFlow","getUserProgress","getUserResponse","getUserProfile","getAccessToken","then","questionFlow","userProgress","userResponse","userProfile","accessToken","userID","postback","referral","isProfileFetched","page_access_token","get","constant","PAGE_ACCESS_TOKEN_KEY","fbrequest","uri","GRAPH_BASE_URL","qs","profile","update","catch","err","error","expectRespType","nextQid","responseHandlerMap","stopAtQid","nextExpectRespType","app","req","res","query","send","post","data","body","object","entry","forEach","pageEntry","messaging","messagingEvent","Object","assign","payload","fbtrEvents","LEADGENBOT_MSG_RECEIVED","sendStatus"],"mappings":"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","file":"webhook.js","sourcesContent":["import logger from 'common/logger';\nimport constant from 'common/constant';\nimport fbrequest from 'common/fbrequest';\nimport {sendQuestion} from 'server/helper/MessengerHelper';\nimport {responseHandlerMap} from 'server/handler/responseHandlers';\nimport {fbtrEvents, fbtr} from 'common/fbtr';\n\nfunction receivedMessage(event, dh) {\n  let senderID = event.sender.id;\n  let recipientID = event.recipient.id;\n  let timeOfMessage = event.timestamp;\n  let message = event.message;\n\n  logger.info(\n    `Received message for user ${senderID} and page ${recipientID} at ${timeOfMessage} ` +\n    `with message: ${JSON.stringify(message)}`\n  );\n\n  Promise.all([\n    dh.getQuestionFlow(),\n    dh.getUserProgress(senderID),\n    dh.getUserResponse(senderID),\n    dh.getUserProfile(senderID),\n    dh.getAccessToken(),\n  ])\n  .then(([questionFlow, userProgress, userResponse, userProfile, accessToken]) => {\n    logger.info(`user ${userProgress.userID} at progress ${JSON.stringify(userProgress.userProgress)}`);\n    if (event.postback && event.postback.referral) {\n      // TODO: handle user info and referral info here\n    }\n\n    if (!userProfile.isProfileFetched()) {\n      // user profile not found in data store, fetching from graph api\n      var page_access_token = accessToken.get(constant.PAGE_ACCESS_TOKEN_KEY);\n      logger.info(`Fetching user profile for ${userProfile.userID}`);\n      fbrequest.get({\n        uri: `${constant.GRAPH_BASE_URL}/${userProfile.userID}`,\n        qs: {\n          'access_token': page_access_token,\n        },\n      })\n      .then((profile) => {\n        logger.info(`user profile fetched ${JSON.stringify(profile)}`);\n        userProfile.update(profile);\n      })\n      .catch((err) => {\n        logger.error(`Profile fetch failed with ${err}`);\n      });\n    }\n\n    let {expectRespType, nextQid} = userProgress.userProgress;\n    expectRespType = expectRespType || 'genesis';\n    nextQid = nextQid || 0;\n    responseHandlerMap[expectRespType](message, event, questionFlow, userProgress, userResponse)\n      .then((nextQid) => {\n        // we can hanlde this response, go to next question\n        return sendQuestion(userProfile, nextQid, questionFlow)\n          .then(([stopAtQid, nextExpectRespType]) => {\n            userProgress.update({\n              expectRespType: nextExpectRespType,\n              nextQid: nextQid,\n              stopAtQid: stopAtQid,\n            });\n          });\n      })\n      .catch((err) => {\n        logger.error(`Oops, can not handle user response because ${JSON.stringify(err)}`);\n        logger.info('fall back to re-send last question.');\n        // can not handle this response, repeat last question\n        sendQuestion(userProfile, nextQid, questionFlow)\n          .then(([stopAtQid, nextExpectRespType]) => {\n            userProgress.update({\n              expectRespType: nextExpectRespType,\n              nextQid: nextQid,\n              stopAtQid: stopAtQid,\n            });\n          });\n      });\n  });\n}\n\nexport function init(app, dh) {\n  app.get('/webhook', (req, res) => {\n    if (req.query['hub.verify_token'] === 'TEMPLATE_BOT') {\n      res.send(req.query['hub.challenge']);\n    } else {\n      res.send('Error, wrong validation token');\n    }\n  });\n\n  app.post('/webhook', (req, res) => {\n    let data = req.body;\n    if (data.object == 'page') {\n      data.entry.forEach((pageEntry) => {\n        pageEntry.messaging.forEach((messagingEvent) => {\n          if (messagingEvent.message) {\n            receivedMessage(messagingEvent, dh);\n          } else if (messagingEvent.postback) {\n            receivedMessage(Object.assign(messagingEvent, {\n              message: messagingEvent.postback.payload,\n            }), dh);\n          } else {\n            logger.info(`Webhook received unsupported messageEvent: ${JSON.stringify(messagingEvent)}`);\n          }\n          fbtr(fbtrEvents.LEADGENBOT_MSG_RECEIVED, messagingEvent.sender.id);\n        });\n      });\n      res.sendStatus(200);\n    }\n  });\n}\n"]}