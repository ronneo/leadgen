{"version":3,"sources":["../../../server/noAuthEndpoint/webhook.js"],"names":["init","receivedMessage","event","dh","senderID","sender","id","recipientID","recipient","timeOfMessage","timestamp","message","logger","info","JSON","stringify","Promise","all","getQuestionFlow","getUserProgress","getUserResponse","then","questionFlow","userProgress","userResponse","userID","postback","referral","expectRespType","nextQid","responseHandlerMap","stopAtQid","nextExpectRespType","update","catch","err","error","app","get","req","res","query","send","post","data","body","object","entry","forEach","pageEntry","messaging","messagingEvent","Object","assign","payload","fbtrEvents","LEADGENBOT_MSG_RECEIVED","sendStatus"],"mappings":"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","file":"webhook.js","sourcesContent":["import logger from 'common/logger';\nimport {sendQuestion} from 'server/helper/MessengerHelper';\nimport {responseHandlerMap} from 'server/handler/responseHandlers';\nimport {fbtrEvents, fbtr} from 'common/fbtr';\n\nfunction receivedMessage(event, dh) {\n  let senderID = event.sender.id;\n  let recipientID = event.recipient.id;\n  let timeOfMessage = event.timestamp;\n  let message = event.message;\n\n  logger.info(\n    `Received message for user ${senderID} and page ${recipientID} at ${timeOfMessage} ` +\n    `with message: ${JSON.stringify(message)}`\n  );\n\n  Promise.all([\n    dh.getQuestionFlow(),\n    dh.getUserProgress(senderID),\n    dh.getUserResponse(senderID),\n  ])\n  .then(([questionFlow, userProgress, userResponse]) => {\n    logger.info(`user ${userProgress.userID} at progress ${JSON.stringify(userProgress.userProgress)}`);\n    if (event.postback && event.postback.referral) {\n      // TODO: handle user info and referral info here\n    }\n    let {expectRespType, nextQid} = userProgress.userProgress;\n    expectRespType = expectRespType || 'genesis';\n    nextQid = nextQid || 0;\n    responseHandlerMap[expectRespType](message, event, questionFlow, userProgress, userResponse)\n      .then((nextQid) => {\n        // we can hanlde this response, go to next question\n        return sendQuestion(senderID, nextQid, questionFlow)\n          .then(([stopAtQid, nextExpectRespType]) => {\n            userProgress.update({\n              expectRespType: nextExpectRespType,\n              nextQid: nextQid,\n              stopAtQid: stopAtQid,\n            });\n          });\n      })\n      .catch((err) => {\n        logger.error(`Oops, can not handle user response because ${JSON.stringify(err)}`);\n        logger.info('fall back to re-send last question.');\n        // can not handle this response, repeat last question\n        sendQuestion(senderID, nextQid, questionFlow)\n          .then(([stopAtQid, nextExpectRespType]) => {\n            userProgress.update({\n              expectRespType: nextExpectRespType,\n              nextQid: nextQid,\n              stopAtQid: stopAtQid,\n            });\n          });\n      });\n  });\n}\n\nexport function init(app, dh) {\n  app.get('/webhook', (req, res) => {\n    if (req.query['hub.verify_token'] === 'TEMPLATE_BOT') {\n      res.send(req.query['hub.challenge']);\n    } else {\n      res.send('Error, wrong validation token');\n    }\n  });\n  \n  app.post('/webhook', (req, res) => {\n    let data = req.body;  \n    if (data.object == 'page') {\n      data.entry.forEach((pageEntry) => {\n        pageEntry.messaging.forEach((messagingEvent) => {\n          if (messagingEvent.message) {\n            receivedMessage(messagingEvent, dh);\n          } else if (messagingEvent.postback) {\n            receivedMessage(Object.assign(messagingEvent, {\n              message: messagingEvent.postback.payload,\n            }), dh);\n          } else {\n            logger.info(`Webhook received unsupported messageEvent: ${JSON.stringify(messagingEvent)}`);\n          }\n          fbtr(fbtrEvents.LEADGENBOT_MSG_RECEIVED, messagingEvent.sender.id);\n        });\n      });\n      res.sendStatus(200);\n    }\n  });\n}\n"]}