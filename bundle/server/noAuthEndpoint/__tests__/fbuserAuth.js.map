{"version":3,"sources":["../../../../server/noAuthEndpoint/__tests__/fbuserAuth.js"],"names":["port","Math","floor","random","express_server","jest","mock","get","fn","mockImplementation","params","Promise","resolve","reject","uri","id","name","email","console","error","REDISCLOUD_URL","LOCAL_FILE_STORE_PATH","GRAPH_BASE_URL","beforeAll","fs","ensureDirSync","constant","test","thedh","DataHandler","then","dh","botConfig","config","permissions","save","listener","request","qs","userid","accesstoken","resolveWithFullResponse","catch","err","expect","statusCode","toBe","afterAll","done","close","removeSync"],"mappings":"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","file":"fbuserAuth.js","sourcesContent":["import fs from 'fs-extra';\nimport request from 'request-promise';\n\nimport constant from 'common/constant';\nimport DataHandler from 'server/store/DataHandler';\nimport {start as startServer} from 'server/server';\n\nconst port = Math.floor(Math.random() * 10000 + 1024);\nlet express_server = null;\n\njest.mock('common/fbrequest', () => {\n  return {\n    get: jest.fn().mockImplementation((params) => {\n      return new Promise((resolve, reject) => {\n        if (params.uri == 'https://graph.facebook.com/v2.11/4') {\n          resolve({\n            id: 4,\n            name: 'zack',\n            email: 'zack@fb.com',\n          });\n          return;\n        }\n        console.error('get', params);\n        reject('err');\n      });\n    }),\n  };\n});\n\njest.mock('common/constant', () => {\n  return {\n    REDISCLOUD_URL: '',\n    LOCAL_FILE_STORE_PATH: './var/data_test_endpoint_fbuserauth',\n    GRAPH_BASE_URL: 'https://graph.facebook.com/v2.11',\n  };\n});\n\nbeforeAll(() => {\n  fs.ensureDirSync(constant.LOCAL_FILE_STORE_PATH);\n});\n\ntest('odd_cases_of_auth', () => {\n  let thedh = null;\n  return DataHandler.get()\n    .then((dh) => {\n      thedh = dh;\n      thedh.botConfig.config.permissions = {\n        'zack-nono@fb.com': true,\n      };\n      return thedh.botConfig.save();\n    })\n    .then(() => {\n      return startServer(port);\n    })\n    .then((listener) => {\n      express_server = listener;\n      // let us try getting access_token\n      return request.get({\n        uri: `http://localhost:${port}/auth/fbuser`,\n        qs: {\n          userid: '4',\n          accesstoken: 'helloworld',\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .catch((err) => {\n      // as the email is not authorized, so must be denied\n      expect(err.statusCode).toBe(401);\n      // now we try getting access_token with incomplete params\n      return request.get({\n        uri: `http://localhost:${port}/auth/fbuser`,\n        qs: {\n          userid: '4',\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .catch((err) => {\n      // should be denied too\n      expect(err.statusCode).toBe(401);\n      // try again\n      return request.get({\n        uri: `http://localhost:${port}/auth/fbuser`,\n        resolveWithFullResponse: true,\n      });\n    })\n    .catch((err) => {\n      // should be denied too\n      expect(err.statusCode).toBe(401);\n      // final try\n      return request.get({\n        uri: `http://localhost:${port}/auth/fbuser`,\n        qs: {\n          accesstoken: 'helloworld',\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .catch((err) => {\n      // should be denied too\n      expect(err.statusCode).toBe(401);\n    });\n});\n\nafterAll((done) => {\n  express_server.close(() => {\n    fs.removeSync(constant.LOCAL_FILE_STORE_PATH);\n    done();\n  });\n});\n"]}