{"version":3,"sources":["../../../server/noAuthEndpoint/fbuserAuth.js"],"names":["init","tryFirstUserIsAdminPolicy","botConfig","email","Promise","resolve","reject","config","permissions","Object","keys","length","save","then","token","checkEmailForAuthorized","catch","err","app","dh","get","req","res","query","userid","accesstoken","fbrequest","uri","constant","GRAPH_BASE_URL","qs","dataobj","status","send","JSON","stringify","access_token","fbtrEvents","LEADGENBOT_USER_LOGIN","token2"],"mappings":";;;;;QA8BgBA,I,GAAAA,I;;AA9BhB;;;;AACA;;;;AAEA;;;;;;AAEA,SAASC,yBAAT,CAAmCC,SAAnC,EAA8CC,KAA9C,EAAqD;AACnD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAI,CAACJ,UAAUK,MAAV,CAAiBC,WAAlB,IACCN,UAAUK,MAAV,CAAiBC,WAAjB,IAAgCC,OAAOC,IAAP,CAAYR,UAAUK,MAAV,CAAiBC,WAA7B,EAA0CG,MAA1C,IAAoD,CADzF,EAC6F;AAC3FT,gBAAUK,MAAV,CAAiBC,WAAjB,uBACGL,KADH,EACW,IADX;AAGAD,gBAAUU,IAAV,GACGC,IADH,CACQ,YAAM;AACV,YAAIC,QAAQZ,UAAUa,uBAAV,CAAkCZ,KAAlC,CAAZ;AACA,YAAIW,KAAJ,EAAW;AACTT,kBAAQS,KAAR;AACD,SAFD,MAEO;AACLR,iBAAO,kBAAP;AACD;AACF,OARH,EASGU,KATH,CASS,UAACC,GAAD,EAAS;AACdX,eAAOW,GAAP;AACD,OAXH;AAYD,KAjBD,MAiBO;AACLX,aAAO,oBAAP;AACD;AACF,GArBM,CAAP;AAsBD;;AAEM,SAASN,IAAT,CAAckB,GAAd,EAAmBC,EAAnB,EAAuB;AAC5BD,MAAIE,GAAJ,CAAQ,cAAR,EAAwB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,eACRD,IAAIE,KAAJ,IAAa,EADL;AAAA,QAC/BC,MAD+B,QAC/BA,MAD+B;AAAA,QACvBC,WADuB,QACvBA,WADuB;;AAEpC,QAAID,UAAUC,WAAd,EAA2B;AACzBC,0BAAUN,GAAV,CAAc;AACZO,aAAQC,mBAASC,cAAjB,SAAmCL,MADvB;AAEZM,YAAI;AACF,oBAAU,eADR;AAEF,0BAAgBL;AAFd;AAFQ,OAAd,EAOCZ,IAPD,CAOM,UAACkB,OAAD,EAAa;AAAA,YACZ5B,KADY,GACH4B,OADG,CACZ5B,KADY;;AAEjB,YAAIW,QAAQK,GAAGjB,SAAH,CAAaa,uBAAb,CAAqCZ,KAArC,CAAZ;AACA,YAAIW,KAAJ,EAAW;AACTQ,cAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,KAAKC,SAAL,CAAe;AAClCC,0BAActB;AADoB,WAAf,CAArB;AAGA,0BAAKuB,iBAAWC,qBAAhB,EAAuCd,MAAvC;AACD,SALD,MAKO;AACLvB,oCAA0BkB,GAAGjB,SAA7B,EAAwCC,KAAxC,EACGU,IADH,CACQ,UAAC0B,MAAD,EAAY;AAChBjB,gBAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,KAAKC,SAAL,CAAe;AAClCC,4BAAcG;AADoB,aAAf,CAArB;AAGD,WALH,EAMGvB,KANH,CAMS,YAAM;AACXM,gBAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,4BAA8CT,MAA9C,mBAAkErB,KAAlE;AACD,WARH;AASD;AACF,OA1BD;AA2BD,KA5BD,MA4BO;AACLmB,UAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qCAArB;AACD;AACF,GAjCD;AAkCD","file":"fbuserAuth.js","sourcesContent":["import fbrequest from 'common/fbrequest';\nimport constant from 'common/constant';\n\nimport {fbtrEvents, fbtr} from 'common/fbtr';\n\nfunction tryFirstUserIsAdminPolicy(botConfig, email) {\n  return new Promise((resolve, reject) => {\n    if (!botConfig.config.permissions ||\n        (botConfig.config.permissions && Object.keys(botConfig.config.permissions).length == 0)) {\n      botConfig.config.permissions = {\n        [email]: true,\n      };\n      botConfig.save()\n        .then(() => {\n          let token = botConfig.checkEmailForAuthorized(email);\n          if (token) {\n            resolve(token);\n          } else {\n            reject('token is invalid');\n          }\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    } else {\n      reject('Not the first user');\n    }\n  });\n}\n\nexport function init(app, dh) {\n  app.get('/auth/fbuser', (req, res) => {\n    let {userid, accesstoken} = req.query || {};\n    if (userid && accesstoken) {\n      fbrequest.get({\n        uri: `${constant.GRAPH_BASE_URL}/${userid}`,\n        qs: {\n          'fields': 'id,name,email',\n          'access_token': accesstoken,\n        }\n      })\n      .then((dataobj) => {\n        let {email} = dataobj;\n        let token = dh.botConfig.checkEmailForAuthorized(email);\n        if (token) {\n          res.status(200).send(JSON.stringify({\n            access_token: token,\n          }));\n          fbtr(fbtrEvents.LEADGENBOT_USER_LOGIN, userid);\n        } else {\n          tryFirstUserIsAdminPolicy(dh.botConfig, email)\n            .then((token2) => {\n              res.status(200).send(JSON.stringify({\n                access_token: token2,\n              }));\n            })\n            .catch(() => {\n              res.status(401).send(`Auth failed with user ${userid} and email ${email}.`);\n            });\n        }\n      });\n    } else {\n      res.status(401).send('Auth failed with incomplete params.');\n    }\n  });\n}\n"]}