{"version":3,"sources":["../../../../server/authEndpoint/__tests__/system.js"],"names":["port","constant","sample_page_id","sample_page","access_token","name","id","express_server","jest","mock","get","fn","mockImplementation","params","Promise","resolve","reject","uri","email","console","error","post","Math","floor","random","ACCESS_TOKEN_TTL","ACCESS_TOKEN_REAP_INTERVAL","REDISCLOUD_URL","FB_APP_ID","FB_APP_ACCESS_TOKEN","FB_APP_SECRET","WEBHOOK_VERIFY_TOKEN","HEROKU_APP_URL","LOCAL_FILE_STORE_PATH","GRAPH_BASE_URL","PAGE_ACCESS_TOKEN_KEY","useFakeTimers","beforeAll","fs","ensureDirSync","test","thedh","theat","DataHandler","then","dh","botConfig","config","permissions","save","request","qs","userid","accesstoken","resolveWithFullResponse","resp","expect","statusCode","toBe","JSON","parse","body","listener","json","page","page_id","data","readJsonSync","toEqual","page_access_token","FBGraphHelper","setWebsiteURL","resolves","undefined","afterAll","done","close","removeSync"],"mappings":"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","file":"system.js","sourcesContent":["import fs from 'fs-extra';\nimport request from 'request-promise';\n\nimport constant from 'common/constant';\nimport DataHandler from 'server/store/DataHandler';\nimport {start as startServer} from 'server/server';\nimport FBGraphHelper from '../../helper/FBGraphHelper';\n\nconst port = constant.port;\nconst sample_page_id = 4000;\nconst sample_page = {\n  access_token: '12345',\n  name: 'sample page',\n  id: sample_page_id,\n};\nlet express_server = null;\n\njest.mock('common/fbrequest', () => {\n  return {\n    get: jest.fn().mockImplementation((params) => {\n      return new Promise((resolve, reject) => {\n        if (params.uri == 'https://graph.facebook.com/v2.11/oauth/access_token') {\n          resolve({\n            access_token: '9999',\n          });\n        } else if (params.uri == 'https://graph.facebook.com/v2.11/4000') {\n          resolve({\n            access_token: '9999',\n          });\n        } else if (params.uri == 'https://graph.facebook.com/v2.11/4') {\n          resolve({\n            id: 4,\n            name: 'zack',\n            email: 'zack@fb.com',\n          });\n        } else {\n          console.error('get', params);\n          reject('err');\n        }\n      });\n    }),\n    post: jest.fn().mockImplementation((params) => {\n      return new Promise((resolve, reject) => {\n        if (params.uri == 'https://graph.facebook.com/v2.11/1234/subscriptions') {\n          resolve();\n        } else if (params.uri == 'https://graph.facebook.com/v2.11/4000/subscribed_apps') {\n          resolve();\n        } else if (params.uri == 'https://graph.facebook.com/v2.11/1234') {\n          resolve();\n        } else {\n          console.error('post', params);\n          reject('err');\n        }\n      });\n    }),\n  };\n});\n\njest.mock('common/constant', () => {\n  const port = Math.floor(Math.random() * 10000 + 1024);\n  return {\n    ACCESS_TOKEN_TTL: 30 * 60, // 30 minutes of seconds\n    ACCESS_TOKEN_REAP_INTERVAL: 60 * 1000, // 1 min\n    REDISCLOUD_URL: '',\n    FB_APP_ID: 1234,\n    FB_APP_ACCESS_TOKEN: '1234|5678',\n    FB_APP_SECRET: 'helloworld',\n    WEBHOOK_VERIFY_TOKEN: 'jedi',\n    HEROKU_APP_URL: `http://localhost:${port}`,\n    LOCAL_FILE_STORE_PATH: './var/data_test_endpoint_system',\n    GRAPH_BASE_URL: 'https://graph.facebook.com/v2.11',\n    PAGE_ACCESS_TOKEN_KEY: 'page_access_token',\n    port: port,\n  };\n});\n\njest.useFakeTimers();\n\nbeforeAll(() => {\n  fs.ensureDirSync(constant.LOCAL_FILE_STORE_PATH);\n});\n\ntest('all', () => {\n  let thedh = null;\n  let theat = null;\n  return DataHandler.get()\n    .then((dh) => {\n      thedh = dh;\n      thedh.botConfig.config.permissions = {\n        'zack@fb.com': true,\n      };\n      return thedh.botConfig.save();\n    })\n    .then(() => {\n      return startServer(port);\n    })\n    .then(() => {\n      // try get without access_token\n      return request.get({\n        uri: `http://localhost:${port}/auth/fbuser`,\n        qs: {\n          userid: 4,\n          accesstoken: 'hello',\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.statusCode).toBe(200);\n      theat = JSON.parse(resp.body).access_token;\n    })\n    .then((listener) => {\n      express_server = listener;\n      return request.post({\n        uri: `http://localhost:${port}/subscribe_page`,\n        json: {\n          page: sample_page,\n          access_token: theat,\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.statusCode).toBe(200);\n      return request.post({\n        uri: `http://localhost:${port}/access_token`,\n        json: {\n          page_id: sample_page_id,\n          access_token: theat,\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.statusCode).toBe(200);\n      let data = fs.readJsonSync(\n        `${constant.LOCAL_FILE_STORE_PATH}/access_token_default.json`,\n      );\n      expect(data).toEqual({\n        page_access_token: '9999',\n      });\n      return expect(FBGraphHelper.setWebsiteURL()).resolves.toBe(undefined);\n    });\n});\n\nafterAll((done) => {\n  express_server.close(() => {\n    fs.removeSync(constant.LOCAL_FILE_STORE_PATH);\n    done();\n  });\n});\n"]}