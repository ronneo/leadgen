{"version":3,"sources":["../../../../server/authEndpoint/__tests__/botConfig.js"],"names":["port","constant","express_server","jest","mock","Math","floor","random","ACCESS_TOKEN_TTL","ACCESS_TOKEN_REAP_INTERVAL","GRAPH_BASE_URL","REDISCLOUD_URL","LOCAL_FILE_STORE_PATH","FB_APP_ID","FB_APP_ACCESS_TOKEN","FB_APP_SECRET","WEBHOOK_VERIFY_TOKEN","HEROKU_APP_URL","greeting_msg","get","fn","mockImplementation","params","Promise","resolve","reject","uri","data","greeting","locale","text","id","name","email","console","error","post","json","useFakeTimers","beforeAll","fs","ensureDirSync","writeJsonSync","page_access_token","test","theat","DataHandler","then","dh","botConfig","config","permissions","save","listener","request","qs","userid","accesstoken","resolveWithFullResponse","resp","expect","statusCode","toBe","JSON","parse","body","access_token","toEqual","afterAll","done","close","removeSync"],"mappings":"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","file":"botConfig.js","sourcesContent":["import fs from 'fs-extra';\nimport request from 'request-promise';\n\nimport constant from 'common/constant';\nimport DataHandler from 'server/store/DataHandler';\nimport {start as startServer} from 'server/server';\n\nconst port = constant.port;\n\nlet express_server = null;\n\njest.mock('common/constant', () => {\n  const port = Math.floor(Math.random() * 10000 + 1024);\n  return {\n    ACCESS_TOKEN_TTL: 30 * 60, // 30 minutes of seconds\n    ACCESS_TOKEN_REAP_INTERVAL: 60 * 1000, // 1 min\n    GRAPH_BASE_URL: 'https://graph.facebook.com/v2.11',\n    REDISCLOUD_URL: '',\n    LOCAL_FILE_STORE_PATH: './var/data_test_endpoint_botconfig',\n    FB_APP_ID: 1234,\n    FB_APP_ACCESS_TOKEN: '1234|5678',\n    FB_APP_SECRET: 'helloworld',\n    WEBHOOK_VERIFY_TOKEN: 'jedi',\n    HEROKU_APP_URL: `http://localhost:${port}/`,\n    port: port,\n  };\n});\n\njest.mock('common/fbrequest', () => {\n  let greeting_msg = 'Default is jedi!';\n  return {\n    get: jest.fn().mockImplementation((params) => {\n      return new Promise((resolve, reject) => {\n        if (params.uri == 'https://graph.facebook.com/v2.11/me/messenger_profile') {\n          resolve({ \n            data: [\n              { \n                greeting: [ \n                  { locale: 'default', text: greeting_msg }\n                ],\n              },\n            ],\n          });\n          return;\n        }\n        if (params.uri == 'https://graph.facebook.com/v2.11/4') {\n          resolve({\n            id: 4,\n            name: 'zack',\n            email: 'zack@fb.com',\n          });\n          return;\n        }\n        console.error('get', params);\n        reject('err');\n      });\n    }),\n    post: jest.fn().mockImplementation((params) => {\n      return new Promise((resolve, reject) => {\n        if (params.uri == 'https://graph.facebook.com/v2.11/me/messenger_profile') {\n          greeting_msg = params.json.greeting[0].text;\n          resolve();\n          return;\n        }\n        console.error('post', params);\n        reject('err');\n      });\n    }),\n  };\n});\n\njest.useFakeTimers();\n\nbeforeAll(() => {\n  fs.ensureDirSync(constant.LOCAL_FILE_STORE_PATH);\n  fs.writeJsonSync(\n    `${constant.LOCAL_FILE_STORE_PATH}/access_token_default.json`,\n    {\n      page_access_token: '9999',\n    }\n  );\n});\n\ntest('all', () => {\n  let theat = null;\n  return DataHandler.get()\n    .then((dh) => {\n      dh.botConfig.config.permissions = {\n        'zack@fb.com': true,\n      };\n      return dh.botConfig.save();\n    })\n    .then(() => {\n      return startServer(port);\n    })\n    .then((listener) => {\n      express_server = listener;\n      // try get without access_token\n      return request.get({\n        uri: `http://localhost:${port}/auth/fbuser`,\n        qs: {\n          userid: 4,\n          accesstoken: 'hello',\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.statusCode).toBe(200);\n      theat = JSON.parse(resp.body).access_token;\n      return request.get({\n        uri: `http://localhost:${port}/welcome_screen`,\n        qs: {\n          access_token: theat,\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.statusCode).toBe(200);\n      expect(resp.body).toEqual('Default is jedi!');\n      return request.post({\n        uri: `http://localhost:${port}/welcome_screen`,\n        qs: {\n          access_token: theat,\n        },\n        json: {\n          text: 'Now seth takes over!',\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.statusCode).toBe(200);\n      return request.get({\n        uri: `http://localhost:${port}/welcome_screen`,\n        qs: {\n          access_token: theat,\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.statusCode).toBe(200);\n      expect(resp.body).toEqual('Now seth takes over!');\n    });\n});\n\nafterAll((done) => {\n  express_server.close(() => {\n    fs.removeSync(constant.LOCAL_FILE_STORE_PATH);\n    done();\n  });\n});\n"]}