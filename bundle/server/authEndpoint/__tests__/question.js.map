{"version":3,"sources":["../../../../server/authEndpoint/__tests__/question.js"],"names":["jest","mock","ACCESS_TOKEN_TTL","ACCESS_TOKEN_REAP_INTERVAL","GRAPH_BASE_URL","REDISCLOUD_URL","LOCAL_FILE_STORE_PATH","useFakeTimers","get","fn","mockImplementation","params","Promise","resolve","reject","uri","id","name","email","console","error","port","Math","floor","random","sample_questions","fs","readJsonSync","sample_questions_modified","concat","express_server","beforeAll","ensureDirSync","constant","writeJsonSync","test","theat","DataHandler","then","dh","botConfig","config","permissions","save","listener","request","qs","userid","accesstoken","resolveWithFullResponse","resp","expect","statusCode","toBe","JSON","parse","body","access_token","toEqual","post","json","afterAll","done","close","removeSync"],"mappings":"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","file":"question.js","sourcesContent":["import fs from 'fs-extra';\nimport request from 'request-promise';\n\nimport constant from 'common/constant';\nimport DataHandler from 'server/store/DataHandler';\nimport {start as startServer} from 'server/server';\n\njest.mock('common/constant', () => {\n  return {\n    ACCESS_TOKEN_TTL: 30 * 60, // 30 minutes of seconds\n    ACCESS_TOKEN_REAP_INTERVAL: 60 * 1000, // 1 min\n    GRAPH_BASE_URL: 'https://graph.facebook.com/v2.11',\n    REDISCLOUD_URL: '',\n    LOCAL_FILE_STORE_PATH: './var/data_test_endpoint_question',\n  };\n});\n\njest.useFakeTimers();\n\njest.mock('common/fbrequest', () => {\n  return {\n    get: jest.fn().mockImplementation((params) => {\n      return new Promise((resolve, reject) => {\n        if (params.uri == 'https://graph.facebook.com/v2.11/4') {\n          resolve({\n            id: 4,\n            name: 'zack',\n            email: 'zack@fb.com',\n          });\n        } else {\n          console.error('get', params);\n          reject('err');\n        }\n      });\n    }),\n  };\n});\n\nconst port = Math.floor(Math.random() * 10000 + 1024);\n\nlet sample_questions = fs.readJsonSync('./sample/data/question_flow_default.json');\nlet sample_questions_modified = [].concat(sample_questions, [{\n  'type': 'greeting',\n  'text': 'jedi',\n}]);\n\nlet express_server = null;\n\nbeforeAll(() => {\n  fs.ensureDirSync(constant.LOCAL_FILE_STORE_PATH);\n  fs.writeJsonSync(\n    `${constant.LOCAL_FILE_STORE_PATH}/question_flow_default.json`,\n    sample_questions,\n  );\n});\n\ntest('all', () => {\n  let theat = null;\n  return DataHandler.get()\n    .then((dh) => {\n      dh.botConfig.config.permissions = {\n        'zack@fb.com': true,\n      };\n      return dh.botConfig.save();\n    })\n    .then(() => {\n      return startServer(port);\n    })\n    .then((listener) => {\n      express_server = listener;\n      // try get without access_token\n      return request.get({\n        uri: `http://localhost:${port}/auth/fbuser`,\n        qs: {\n          userid: 4,\n          accesstoken: 'hello',\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.statusCode).toBe(200);\n      theat = JSON.parse(resp.body).access_token;\n      return request.get({\n        uri: `http://localhost:${port}/questions`,\n        qs: {\n          access_token: theat,\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.statusCode).toBe(200);\n      expect(JSON.parse(resp.body)).toEqual(sample_questions);\n      return request.post({\n        uri: `http://localhost:${port}/questions`,\n        qs: {\n          access_token: theat,\n        },\n        json: sample_questions_modified,\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.statusCode).toBe(200);\n      return request.get({\n        uri: `http://localhost:${port}/questions`,\n        qs: {\n          access_token: theat,\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.statusCode).toBe(200);\n      expect(JSON.parse(resp.body)).toEqual(sample_questions_modified);\n    });\n});\n\nafterAll((done) => {\n  express_server.close(() => {\n    fs.removeSync(constant.LOCAL_FILE_STORE_PATH);\n    done();\n  });\n});\n"]}