{"version":3,"sources":["../../../server/authEndpoint/lead.js"],"names":["init","genCSVBuilder","dh","flatattr","getQuestionFlow","then","question_flow","header","questions","forEach","question","index","needNoAnswer","questionHandlerMap","type","push","key","user_resps","row","Array","length","map","resp","indexOf","qid","payload","timeOfMessage","loadOneUserResponse","csv_builder","getUserResponse","user_resp_mgr","userResponses","loadAllResponsesForExport","scanUserResponses","keys","Promise","resolve","_reject","_load","callback","logger","info","rest_keys","splice","app","get","req","res","csv","catch","err","error","JSON","stringify","sendStatus","fbtrEvents","LEADGENBOT_EXPORT_LEAD","status","send","all","query","getUserProgress","user_prog_mgr","progress","userProgress","response","delete","del","user_progress_mgr"],"mappings":"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","file":"lead.js","sourcesContent":["import logger from 'common/logger';\n\nimport { questionHandlerMap } from 'server/handler/questionHandlers';\nimport { fbtrEvents, fbtr } from 'common/fbtr';\n\nfunction genCSVBuilder(dh, flatattr) {\n  return dh.getQuestionFlow()\n    .then((question_flow) => {\n      let header = ['uid'];\n      question_flow.questions.forEach((question, index) => {\n        let needNoAnswer = questionHandlerMap[question.type](0, question)[1];\n        if (!needNoAnswer) {\n          header.push(`q${index}`);\n          header.push(`payload${index}`);\n          header.push(`timeofmessage${index}`);\n        }\n      });\n      flatattr.push(header);\n      return header;\n    })\n    .then((header) => {\n      return (key, user_resps) => {\n        let row = (new Array(header.length)).map(() => { return ''; });\n        row[0] = key;\n        user_resps.forEach((resp) => {\n          let index = header.indexOf(`q${resp.qid}`);\n          row[index] = resp.qid;\n          row[index+1] = resp.payload;\n          row[index+2] = resp.timeOfMessage;\n        });\n        flatattr.push(row);\n      };\n    });\n}\n\nfunction loadOneUserResponse(dh, key, csv_builder) {\n  return dh.getUserResponse(key)\n    .then((user_resp_mgr) => {\n      csv_builder(key, user_resp_mgr.userResponses);\n      return key;\n    });\n}\n\nfunction loadAllResponsesForExport(dh, csv_builder) {\n  return dh.scanUserResponses()\n    .then((keys) => {\n      return new Promise((resolve, _reject) => {\n        function _load(keys, callback) {\n          if (keys.length <= 0) {\n            logger.info(`No keys`);\n            callback();\n          } else {\n\n            let key = keys[0];\n            logger.info(`Loading keys: ${key}`);\n            let rest_keys = keys.splice(1);\n            loadOneUserResponse(dh, key, csv_builder)\n              .then(() => {\n                _load(rest_keys, callback);\n              });\n          }\n        }\n        _load(keys, resolve);\n      });\n    });\n}\n\nexport function init(app, dh) {\n  app.get('/download_leads', (req, res) => {\n    let flatattr = [];\n    genCSVBuilder(dh, flatattr)\n      .then((csv_builder) => {\n        return loadAllResponsesForExport(dh, csv_builder);\n      })\n      .then(() => {\n        res.csv(flatattr);\n      })\n      .catch((err) => {\n        logger.error(`error while generating flat responses for export: ${JSON.stringify(err)}`);\n        res.sendStatus(500);\n      });\n    fbtr(fbtrEvents.LEADGENBOT_EXPORT_LEAD);\n  });\n\n  app.get('/lead_scan_keys', (req, res) => {\n    dh.scanUserResponses()\n      .then((keys) => {\n        res.status(200).send(keys);\n      });\n  });\n\n  app.get('/lead_with_key', (req, res) => {\n    Promise.all([\n      dh.getUserResponse(req.query.key),\n      dh.getUserProgress(req.query.key),\n    ])\n    .then(([user_resp_mgr, user_prog_mgr]) => {\n      res.status(200).send({\n        progress: user_prog_mgr.userProgress,\n        response: user_resp_mgr.userResponses\n      });\n    });\n  });\n\n  app.delete('/lead_with_key', (req, res) => {\n    dh.getUserResponse(req.query.key)\n      .then((user_resp_mgr) => {\n        return user_resp_mgr.del();\n      })\n      .then(() => {\n        return dh.getUserProgress(req.query.key);\n      })\n      .then((user_progress_mgr) => {\n        return user_progress_mgr.del();\n      })\n      .then(() => {\n        res.sendStatus(200);\n      });\n  });\n}\n"]}