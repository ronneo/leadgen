{"version":3,"sources":["../../../server/authEndpoint/lead.js"],"names":["init","genCSVBuilder","dh","flatattr","getQuestionFlow","then","question_flow","header","logger","info","questions","forEach","question","index","type","needNoAnswer","questionHandlerMap","push","key","user_resps","row","Array","length","map","resp","indexOf","qid","payload","timeOfMessage","loadOneUserResponse","csv_builder","getUserResponse","user_resp_mgr","userResponses","loadAllResponsesForExport","scanUserResponses","keys","Promise","resolve","_reject","_load","callback","rest_keys","splice","app","get","req","res","csv","catch","err","error","JSON","stringify","sendStatus","fbtrEvents","LEADGENBOT_EXPORT_LEAD","status","send","all","query","getUserProgress","user_prog_mgr","progress","userProgress","response","delete","del","user_progress_mgr"],"mappings":";;;;;;;;QAyEgBA,I,GAAAA,I;;AAzEhB;;;;AAEA;;AACA;;;;AAEA,SAASC,aAAT,CAAuBC,EAAvB,EAA2BC,QAA3B,EAAqC;AACnC,SAAOD,GAAGE,eAAH,GACJC,IADI,CACC,UAACC,aAAD,EAAmB;AACvB,QAAIC,SAAS,CAAC,KAAD,CAAb;AACAC,qBAAOC,IAAP,uBAAgCF,MAAhC;AACAC,qBAAOC,IAAP,uBAAgCH,cAAcI,SAA9C;AACAJ,kBAAcI,SAAd,CAAwBC,OAAxB,CAAgC,UAACC,QAAD,EAAWC,KAAX,EAAqB;AACnDL,uBAAOC,IAAP,yBAAkCG,SAASE,IAA3C;AACA,UAAIC,eAAeC,qCAAmBJ,SAASE,IAA5B,EAAkC,CAAlC,EAAqCF,QAArC,EAA+C,CAA/C,CAAnB;AACAJ,uBAAOC,IAAP,yBAAkCM,YAAlC;AACA,UAAI,CAACA,YAAL,EAAmB;AACjBR,eAAOU,IAAP,OAAgBJ,KAAhB;AACAN,eAAOU,IAAP,aAAsBJ,KAAtB;AACAN,eAAOU,IAAP,mBAA4BJ,KAA5B;AACD;AACF,KATD;AAUAL,qBAAOC,IAAP,uBAAgCF,MAAhC;AACAJ,aAASc,IAAT,CAAcV,MAAd;AACA,WAAOA,MAAP;AACD,GAlBI,EAmBJF,IAnBI,CAmBC,UAACE,MAAD,EAAY;AAChB,WAAO,UAACW,GAAD,EAAMC,UAAN,EAAqB;AAC1B,UAAIC,MAAO,IAAIC,KAAJ,CAAUd,OAAOe,MAAjB,CAAD,CAA2BC,GAA3B,CAA+B,YAAM;AAAE,eAAO,EAAP;AAAY,OAAnD,CAAV;AACAH,UAAI,CAAJ,IAASF,GAAT;AACAC,iBAAWR,OAAX,CAAmB,UAACa,IAAD,EAAU;AAC3B,YAAIX,QAAQN,OAAOkB,OAAP,OAAmBD,KAAKE,GAAxB,CAAZ;AACAN,YAAIP,KAAJ,IAAaW,KAAKE,GAAlB;AACAN,YAAIP,QAAM,CAAV,IAAeW,KAAKG,OAApB;AACAP,YAAIP,QAAM,CAAV,IAAeW,KAAKI,aAApB;AACD,OALD;AAMApB,uBAAOC,IAAP,oBAA6BW,GAA7B;AACAjB,eAASc,IAAT,CAAcG,GAAd;AACD,KAXD;AAYD,GAhCI,CAAP;AAiCD;;AAED,SAASS,mBAAT,CAA6B3B,EAA7B,EAAiCgB,GAAjC,EAAsCY,WAAtC,EAAmD;AACjD,SAAO5B,GAAG6B,eAAH,CAAmBb,GAAnB,EACJb,IADI,CACC,UAAC2B,aAAD,EAAmB;AACvBF,gBAAYZ,GAAZ,EAAiBc,cAAcC,aAA/B;AACA,WAAOf,GAAP;AACD,GAJI,CAAP;AAKD;;AAED,SAASgB,yBAAT,CAAmChC,EAAnC,EAAuC4B,WAAvC,EAAoD;AAClD,SAAO5B,GAAGiC,iBAAH,GACJ9B,IADI,CACC,UAAC+B,IAAD,EAAU;AACd,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,OAAV,EAAsB;AACvC,eAASC,KAAT,CAAeJ,IAAf,EAAqBK,QAArB,EAA+B;AAC7B,YAAIL,KAAKd,MAAL,IAAe,CAAnB,EAAsB;AACpBd,2BAAOC,IAAP;AACAgC;AACD,SAHD,MAGO;;AAEL,cAAIvB,MAAMkB,KAAK,CAAL,CAAV;AACA5B,2BAAOC,IAAP,oBAA6BS,GAA7B;AACA,cAAIwB,YAAYN,KAAKO,MAAL,CAAY,CAAZ,CAAhB;AACAd,8BAAoB3B,EAApB,EAAwBgB,GAAxB,EAA6BY,WAA7B,EACGzB,IADH,CACQ,YAAM;AACVmC,kBAAME,SAAN,EAAiBD,QAAjB;AACD,WAHH;AAID;AACF;AACDD,YAAMJ,IAAN,EAAYE,OAAZ;AACD,KAjBM,CAAP;AAkBD,GApBI,CAAP;AAqBD;;AAEM,SAAStC,IAAT,CAAc4C,GAAd,EAAmB1C,EAAnB,EAAuB;AAC5B0C,MAAIC,GAAJ,CAAQ,iBAAR,EAA2B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvC,QAAI5C,WAAW,EAAf;AACAF,kBAAcC,EAAd,EAAkBC,QAAlB,EACGE,IADH,CACQ,UAACyB,WAAD,EAAiB;AACrBtB,uBAAOC,IAAP;AACA,aAAOyB,0BAA0BhC,EAA1B,EAA8B4B,WAA9B,CAAP;AACD,KAJH,EAKGzB,IALH,CAKQ,YAAM;AACV0C,UAAIC,GAAJ,CAAQ7C,QAAR;AACD,KAPH,EAQG8C,KARH,CAQS,UAACC,GAAD,EAAS;AACd1C,uBAAO2C,KAAP,wDAAkEC,KAAKC,SAAL,CAAeH,GAAf,CAAlE;AACAH,UAAIO,UAAJ,CAAe,GAAf;AACD,KAXH;AAYA,oBAAKC,iBAAWC,sBAAhB;AACD,GAfD;;AAiBAZ,MAAIC,GAAJ,CAAQ,iBAAR,EAA2B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvC7C,OAAGiC,iBAAH,GACG9B,IADH,CACQ,UAAC+B,IAAD,EAAU;AACdW,UAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBtB,IAArB;AACD,KAHH;AAID,GALD;;AAOAQ,MAAIC,GAAJ,CAAQ,gBAAR,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtCV,YAAQsB,GAAR,CAAY,CACVzD,GAAG6B,eAAH,CAAmBe,IAAIc,KAAJ,CAAU1C,GAA7B,CADU,EAEVhB,GAAG2D,eAAH,CAAmBf,IAAIc,KAAJ,CAAU1C,GAA7B,CAFU,CAAZ,EAICb,IAJD,CAIM,gBAAoC;AAAA;AAAA,UAAlC2B,aAAkC;AAAA,UAAnB8B,aAAmB;;AACxCf,UAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBK,kBAAUD,cAAcE,YADL;AAEnBC,kBAAUjC,cAAcC;AAFL,OAArB;AAID,KATD;AAUD,GAXD;;AAaAW,MAAIsB,MAAJ,CAAW,gBAAX,EAA6B,UAACpB,GAAD,EAAMC,GAAN,EAAc;AACzC7C,OAAG6B,eAAH,CAAmBe,IAAIc,KAAJ,CAAU1C,GAA7B,EACGb,IADH,CACQ,UAAC2B,aAAD,EAAmB;AACvB,aAAOA,cAAcmC,GAAd,EAAP;AACD,KAHH,EAIG9D,IAJH,CAIQ,YAAM;AACV,aAAOH,GAAG2D,eAAH,CAAmBf,IAAIc,KAAJ,CAAU1C,GAA7B,CAAP;AACD,KANH,EAOGb,IAPH,CAOQ,UAAC+D,iBAAD,EAAuB;AAC3B,aAAOA,kBAAkBD,GAAlB,EAAP;AACD,KATH,EAUG9D,IAVH,CAUQ,YAAM;AACV0C,UAAIO,UAAJ,CAAe,GAAf;AACD,KAZH;AAaD,GAdD;AAeD","file":"lead.js","sourcesContent":["import logger from 'common/logger';\n\nimport { questionHandlerMap } from 'server/handler/questionHandlers';\nimport { fbtrEvents, fbtr } from 'common/fbtr';\n\nfunction genCSVBuilder(dh, flatattr) {\n  return dh.getQuestionFlow()\n    .then((question_flow) => {\n      let header = ['uid'];\n      logger.info(`Creating header: ${header}`);\n      logger.info(`Creating header: ${question_flow.questions}`);\n      question_flow.questions.forEach((question, index) => {\n        logger.info(`Creating header 1: ${question.type}`);\n        let needNoAnswer = questionHandlerMap[question.type](0, question)[1];\n        logger.info(`Creating header 2: ${needNoAnswer}`);\n        if (!needNoAnswer) {\n          header.push(`q${index}`);\n          header.push(`payload${index}`);\n          header.push(`timeofmessage${index}`);\n        }\n      });\n      logger.info(`Creating header: ${header}`);\n      flatattr.push(header);\n      return header;\n    })\n    .then((header) => {\n      return (key, user_resps) => {\n        let row = (new Array(header.length)).map(() => { return ''; });\n        row[0] = key;\n        user_resps.forEach((resp) => {\n          let index = header.indexOf(`q${resp.qid}`);\n          row[index] = resp.qid;\n          row[index+1] = resp.payload;\n          row[index+2] = resp.timeOfMessage;\n        });\n        logger.info(`Creating row: ${row}`);\n        flatattr.push(row);\n      };\n    });\n}\n\nfunction loadOneUserResponse(dh, key, csv_builder) {\n  return dh.getUserResponse(key)\n    .then((user_resp_mgr) => {\n      csv_builder(key, user_resp_mgr.userResponses);\n      return key;\n    });\n}\n\nfunction loadAllResponsesForExport(dh, csv_builder) {\n  return dh.scanUserResponses()\n    .then((keys) => {\n      return new Promise((resolve, _reject) => {\n        function _load(keys, callback) {\n          if (keys.length <= 0) {\n            logger.info(`No keys`);\n            callback();\n          } else {\n\n            let key = keys[0];\n            logger.info(`Loading keys: ${key}`);\n            let rest_keys = keys.splice(1);\n            loadOneUserResponse(dh, key, csv_builder)\n              .then(() => {\n                _load(rest_keys, callback);\n              });\n          }\n        }\n        _load(keys, resolve);\n      });\n    });\n}\n\nexport function init(app, dh) {\n  app.get('/download_leads', (req, res) => {\n    let flatattr = [];\n    genCSVBuilder(dh, flatattr)\n      .then((csv_builder) => {\n        logger.info(`Creating datastore for download`);\n        return loadAllResponsesForExport(dh, csv_builder);\n      })\n      .then(() => {\n        res.csv(flatattr);\n      })\n      .catch((err) => {\n        logger.error(`error while generating flat responses for export: ${JSON.stringify(err)}`);\n        res.sendStatus(500);\n      });\n    fbtr(fbtrEvents.LEADGENBOT_EXPORT_LEAD);\n  });\n\n  app.get('/lead_scan_keys', (req, res) => {\n    dh.scanUserResponses()\n      .then((keys) => {\n        res.status(200).send(keys);\n      });\n  });\n\n  app.get('/lead_with_key', (req, res) => {\n    Promise.all([\n      dh.getUserResponse(req.query.key),\n      dh.getUserProgress(req.query.key),\n    ])\n    .then(([user_resp_mgr, user_prog_mgr]) => {\n      res.status(200).send({\n        progress: user_prog_mgr.userProgress,\n        response: user_resp_mgr.userResponses\n      });\n    });\n  });\n\n  app.delete('/lead_with_key', (req, res) => {\n    dh.getUserResponse(req.query.key)\n      .then((user_resp_mgr) => {\n        return user_resp_mgr.del();\n      })\n      .then(() => {\n        return dh.getUserProgress(req.query.key);\n      })\n      .then((user_progress_mgr) => {\n        return user_progress_mgr.del();\n      })\n      .then(() => {\n        res.sendStatus(200);\n      });\n  });\n}\n"]}