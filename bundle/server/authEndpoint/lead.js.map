{"version":3,"sources":["../../../server/authEndpoint/lead.js"],"names":["init","genCSVBuilder","dh","flatattr","getQuestionFlow","then","question_flow","header","questions","forEach","question","index","needNoAnswer","questionHandlerMap","type","push","key","user_resps","row","Array","length","map","resp","indexOf","qid","payload","getReadableDatetime","timeOfMessage","unixtimestamp","a","Date","months","getDate","getMonth","getFullYear","getHours","getMinutes","loadOneUserResponse","csv_builder","getUserResponse","user_resp_mgr","userResponses","loadAllResponsesForExport","scanUserResponses","keys","Promise","resolve","_reject","_load","callback","rest_keys","splice","app","get","req","res","csv","catch","err","logger","error","JSON","stringify","sendStatus","fbtrEvents","LEADGENBOT_EXPORT_LEAD","status","send","all","query","getUserProgress","user_prog_mgr","progress","userProgress","response","delete","del","user_progress_mgr"],"mappings":"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","file":"lead.js","sourcesContent":["import logger from 'common/logger';\n\nimport { questionHandlerMap } from 'server/handler/questionHandlers';\nimport { fbtrEvents, fbtr } from 'common/fbtr';\n\nfunction genCSVBuilder(dh, flatattr) {\n  return dh.getQuestionFlow()\n    .then((question_flow) => {\n      let header = ['uid'];\n      question_flow.questions.forEach((question, index) => {\n        let needNoAnswer = questionHandlerMap[question.type](0, question, {})[1];\n        if (!needNoAnswer) {\n          header.push(`query no.${index}`);\n          header.push(`reply payload no.${index}`);\n          header.push(`time of message for ${index}`);\n        }\n      });\n      flatattr.push(header);\n      return header;\n    })\n    .then((header) => {\n      return (key, user_resps) => {\n        let row = (new Array(header.length)).map(() => { return ''; });\n        row[0] = key;\n        user_resps.forEach((resp) => {\n          let index = header.indexOf(`query no.${resp.qid}`);\n          \n          row[index] = resp.qid;\n          row[index+1] = resp.payload;\n          row[index+2] = getReadableDatetime(resp.timeOfMessage);\n        });\n        flatattr.push(row);\n      };\n    });\n}\n\nfunction getReadableDatetime(unixtimestamp) {\n  let a = new Date(unixtimestamp);\n  let months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n\n  return a.getDate() + ' ' + months[a.getMonth()] + ' ' + a.getFullYear() + ' ' + a.getHours() + ':' + a.getMinutes();\n}\n\nfunction loadOneUserResponse(dh, key, csv_builder) {\n  return dh.getUserResponse(key)\n    .then((user_resp_mgr) => {\n      csv_builder(key, user_resp_mgr.userResponses);\n      return key;\n    });\n}\n\nfunction loadAllResponsesForExport(dh, csv_builder) {\n  return dh.scanUserResponses()\n    .then((keys) => {\n      return new Promise((resolve, _reject) => {\n        function _load(keys, callback) {\n          if (keys.length <= 0) {\n            callback();\n          } else {\n            let key = keys[0];\n            let rest_keys = keys.splice(1);\n            loadOneUserResponse(dh, key, csv_builder)\n              .then(() => {\n                _load(rest_keys, callback);\n              });\n          }\n        }\n        _load(keys, resolve);\n      });\n    });\n}\n\nexport function init(app, dh) {\n  app.get('/download_leads', (req, res) => {\n    let flatattr = [];\n    genCSVBuilder(dh, flatattr)\n      .then((csv_builder) => {\n        return loadAllResponsesForExport(dh, csv_builder);\n      })\n      .then(() => {\n        res.csv(flatattr);\n      })\n      .catch((err) => {\n        logger.error(`error while generating flat responses for export: ${JSON.stringify(err)}`);\n        res.sendStatus(500);\n      });\n    fbtr(fbtrEvents.LEADGENBOT_EXPORT_LEAD);\n  });\n\n  app.get('/lead_scan_keys', (req, res) => {\n    dh.scanUserResponses()\n      .then((keys) => {\n        res.status(200).send(keys);\n      });\n  });\n\n  app.get('/lead_with_key', (req, res) => {\n    Promise.all([\n      dh.getUserResponse(req.query.key),\n      dh.getUserProgress(req.query.key),\n    ])\n    .then(([user_resp_mgr, user_prog_mgr]) => {\n      res.status(200).send({\n        progress: user_prog_mgr.userProgress,\n        response: user_resp_mgr.userResponses\n      });\n    });\n  });\n\n  app.delete('/lead_with_key', (req, res) => {\n    dh.getUserResponse(req.query.key)\n      .then((user_resp_mgr) => {\n        return user_resp_mgr.del();\n      })\n      .then(() => {\n        return dh.getUserProgress(req.query.key);\n      })\n      .then((user_progress_mgr) => {\n        return user_progress_mgr.del();\n      })\n      .then(() => {\n        res.sendStatus(200);\n      });\n  });\n}\n"]}